// This is generated file
// Origin file: 'CodeGen\Tests/BigIntTest.ppln'
#include "all_pipelines.h"
// C++ shader
#ifdef GRAPHICS_API_SOFT
namespace SWShaderLang {
namespace {

#	define INOUT
#	define IN
#	define OUT

	struct BigInt
	{
		SArr<UInt,4> value;
		UInt lastBit;
	
		BigInt () {}
		BigInt (BigInt &&) = default;
		BigInt (const BigInt &) = default;
		explicit BigInt(const SArr<UInt,4> &value, const UInt &lastBit) : value{value}, lastBit{lastBit} {}
	
		BigInt& operator = (BigInt &&) = default;
		BigInt& operator = (const BigInt &) = default;
		Bool operator == (const BigInt &right) const {
			return	all( value == right.value ) &&
					all( lastBit == right.lastBit );
		}
		Bool operator != (const BigInt &right) const { return !(*this == right); }
	
	};
	
	struct BigIntTest_SSBO
	{
		UInt result;
		Float _padding0;
		Float _padding1;
		Float _padding2;
	
		BigIntTest_SSBO () {}
		BigIntTest_SSBO (BigIntTest_SSBO &&) = default;
		BigIntTest_SSBO (const BigIntTest_SSBO &) = default;
		explicit BigIntTest_SSBO(const UInt &result, const Float &_padding0, const Float &_padding1, const Float &_padding2) : result{result}, _padding0{_padding0}, _padding1{_padding1}, _padding2{_padding2} {}
	
		BigIntTest_SSBO& operator = (BigIntTest_SSBO &&) = default;
		BigIntTest_SSBO& operator = (const BigIntTest_SSBO &) = default;
		Bool operator == (const BigIntTest_SSBO &right) const {
			return	all( result == right.result ) &&
					all( _padding0 == right._padding0 ) &&
					all( _padding1 == right._padding1 ) &&
					all( _padding2 == right._padding2 );
		}
		Bool operator != (const BigIntTest_SSBO &right) const { return !(*this == right); }
	
	};
	
	
	//---------------------------------
	
	static void BigInt_Add (INOUT BigInt &bi1, IN UInt right);
	static UInt ToMask (const UInt x);
	static void BigInt_Create (OUT BigInt &bi);
	static UInt BitScanReverse (const UInt x1);
	static Bool BigInt_IsZero (const BigInt bi2, const UInt pos);
	static UInt BigInt_Read (const BigInt bi3, IN UInt pos1, const UInt count);
	static void BigInt_Write (INOUT BigInt &bi4, IN UInt value, IN UInt pos2, const UInt count1);
	static UInt _BigInt_CalcBits (const BigInt bi5, const UInt i);
	static UInt TestAdd ();
	static UInt TestRead ();
	static UInt TestRead2 ();
	static UInt TestLastBit ();
	static UInt TestWrite ();
	
	//---------------------------------
	
	static UInt ToMask (const UInt x)
	{
		return ( ((x < UInt(0u))) ? (UInt(0u)) : (( ((x < UInt(32u))) ? (((UInt(1u) << x) - UInt(1u))) : (UInt(4294967295u)) )) );
	}
	
	
	static UInt BitScanReverse (const UInt x1)
	{
		return UInt(findMSB(x1));
	}
	
	
	static void BigInt_Create (OUT BigInt &bi)
	{
		for (UInt c = UInt(0u); (c < UInt(4u)); ++(c))
		{
			(bi.value[c]) = UInt(0u);
		}
		;
		bi.lastBit = UInt(0u);
	}
	
	
	static void BigInt_Add (INOUT BigInt &bi1, IN UInt right)
	{
		for (UInt h = UInt(0u); (h < UInt(4u)); ++(h))
		{
			const UInt prev = (bi1.value[h]);
			;
			((bi1.value[h]) += right);
			if (((bi1.value[h]) >= prev))
			{
				bi1.lastBit = glm::max(bi1.lastBit, _BigInt_CalcBits(bi1, h));
				break;
			;
			}
			;
			right = UInt(1u);
		}
		;
	}
	
	
	static Bool BigInt_IsZero (const BigInt bi2, const UInt pos)
	{
		return (pos >= bi2.lastBit);
	}
	
	
	static UInt BigInt_Read (const BigInt bi3, IN UInt pos1, const UInt count)
	{
		const UInt k = glm::clamp((pos1 / UInt(32u)), UInt(0u), UInt(3u));
		;
		(pos1 -= (UInt(32u) * k));
		UInt result = (((bi3.value[k]) >> pos1) & ToMask(count));
		;
		UInt max_count = (UInt(32u) - pos1);
		;
		if (((count > max_count) && ((k + UInt(1u)) < UInt(4u))))
		{
			(result |= (((bi3.value[(k + UInt(1u))]) & ToMask((count - max_count))) << max_count));
		;
		}
		;
		return result;
	}
	
	
	static void BigInt_Write (INOUT BigInt &bi4, IN UInt value, IN UInt pos2, const UInt count1)
	{
		UInt m = glm::clamp((pos2 / UInt(32u)), UInt(0u), UInt(3u));
		;
		(pos2 -= (UInt(32u) * m));
		(value &= ToMask(count1));
		UInt max_count1 = (UInt(32u) - pos2);
		;
		((bi4.value[m]) |= (value << pos2));
		if (((count1 > max_count1) && ((m + UInt(1u)) < UInt(4u))))
		{
			((bi4.value[++(m)]) |= (value >> max_count1));
		;
		}
		;
		bi4.lastBit = _BigInt_CalcBits(bi4, m);
	}
	
	
	static UInt _BigInt_CalcBits (const BigInt bi5, const UInt i)
	{
		return ((BitScanReverse((bi5.value[i])) + UInt(1u)) + (i * UInt(32u)));
	}
	
	
	static UInt TestAdd ()
	{
		UInt res = UInt(0u);
		;
		BigInt bi6;
		BigInt_Create(bi6);
		BigInt_Add(bi6, UInt(4294967290u));
		BigInt_Add(bi6, UInt(4294967292u));
		(res += UInt(((bi6.value[Int(0)]) == UInt(4294967286u))));
		(res += UInt(((bi6.value[Int(1)]) == UInt(1u))));
		BigInt_Add(bi6, UInt(4294967293u));
		(res += UInt(((bi6.value[Int(0)]) == UInt(4294967283u))));
		(res += UInt(((bi6.value[Int(1)]) == UInt(2u))));
		return res;
	}
	
	
	static UInt TestRead ()
	{
		UInt res1 = UInt(0u);
		;
		BigInt bi7;
		BigInt_Create(bi7);
		(bi7.value[Int(0)]) = UInt(4294967295u);
		(bi7.value[Int(1)]) = UInt(65535u);
		bi7.lastBit = _BigInt_CalcBits(bi7, UInt(1u));
		UInt pos3 = UInt(44u);
		;
		UInt count2 = UInt(8u);
		;
		UInt readn = BigInt_Read(bi7, pos3, count2);
		;
		(res1 += UInt((readn == UInt(15u))));
		(res1 += UInt(!(BigInt_IsZero(bi7, (pos3 + UInt(3u))))));
		(res1 += UInt(BigInt_IsZero(bi7, (pos3 + UInt(4u)))));
		(res1 += UInt(BigInt_IsZero(bi7, (pos3 + count2))));
		return res1;
	}
	
	
	static UInt TestRead2 ()
	{
		UInt res2 = UInt(0u);
		;
		BigInt bi8;
		BigInt_Create(bi8);
		(bi8.value[Int(0)]) = UInt(4294967295u);
		(bi8.value[Int(1)]) = UInt(291u);
		bi8.lastBit = _BigInt_CalcBits(bi8, UInt(1u));
		UInt pos4 = UInt(28u);
		;
		UInt count3 = UInt(16u);
		;
		UInt readn1 = BigInt_Read(bi8, pos4, count3);
		;
		(res2 += UInt((readn1 == UInt(4671u))));
		(res2 += UInt(!(BigInt_IsZero(bi8, (pos4 + UInt(12u))))));
		(res2 += UInt(BigInt_IsZero(bi8, (pos4 + UInt(13u)))));
		(res2 += UInt(BigInt_IsZero(bi8, (pos4 + count3))));
		pos4 = UInt(0u);
		count3 = UInt(4u);
		readn1 = BigInt_Read(bi8, pos4, count3);
		(res2 += UInt((readn1 == UInt(15u))));
		return res2;
	}
	
	
	static UInt TestLastBit ()
	{
		UInt res3 = UInt(0u);
		;
		BigInt bi9;
		BigInt_Create(bi9);
		(res3 += UInt((bi9.lastBit == UInt(0u))));
		BigInt_Add(bi9, UInt(0u));
		(res3 += UInt((bi9.lastBit == UInt(0u))));
		BigInt_Add(bi9, UInt(1u));
		(res3 += UInt((bi9.lastBit == UInt(1u))));
		BigInt_Add(bi9, UInt(4294967295u));
		(res3 += UInt((bi9.lastBit == UInt(33u))));
		return res3;
	}
	
	
	static UInt TestWrite ()
	{
		UInt res4 = UInt(0u);
		;
		UInt pos5 = UInt(28u);
		;
		UInt count4 = UInt(16u);
		;
		UInt value1 = UInt(62805u);
		;
		BigInt bi10;
		BigInt_Create(bi10);
		BigInt_Write(bi10, value1, pos5, count4);
		UInt readn2 = BigInt_Read(bi10, pos5, count4);
		;
		(res4 += UInt((bi10.lastBit == (pos5 + count4))));
		(res4 += UInt((readn2 == value1)));
		return res4;
	}
	
	
	static void sw_biginttest_comp (const Impl::SWShaderHelper &_helper_)
	{
		// prepare externals
		Impl::StorageBuffer< BigIntTest_SSBO, Impl::EStorageAccess::WriteOnly >  ssb;    _helper_.GetStorageBuffer( 0, ssb );
	
		// shader
		{
			UInt res5 = UInt(130u);
			;
			(res5 -= TestAdd());
			(res5 -= TestRead());
			(res5 -= TestRead2());
			(res5 -= TestLastBit());
			(res5 -= TestWrite());
			ssb->result = res5;
		}
	}
	
}		// anonymous namespace
}		// SWShaderLang
#endif	// GRAPHICS_API_SOFT


namespace Pipelines
{

void Create_biginttest (PipelineTemplateDescription& descr)
{
	descr = PipelineTemplateDescription();
	descr.supportedShaders = EShader::Compute;

	descr.localGroupSize = uint3(1, 1, 1);
	descr.layout = PipelineLayoutDescription::Builder()
			.AddStorageBuffer( "ssb", 16_b, 0_b, EShaderMemoryModel::WriteOnly, 0u, 0u, EShader::Compute )
			.Finish();

	descr.Compute().StringGLSL( 
R"#(#version 450 core
layout (local_size_x=1, local_size_y=1, local_size_z=1) in;

struct BigInt
{
	uint value[4];
	uint lastBit;
};


//---------------------------------

layout(binding=0) layout(std430) writeonly buffer BigIntTest_SSBO{
	uint result;
	float _padding0;
	float _padding1;
	float _padding2;
} ssb;

//---------------------------------

uint TestWrite ();
uint TestLastBit ();
uint ToMask (const uint x);
uint BitScanReverse (const uint x1);
void BigInt_Create (out BigInt bi);
uint BigInt_Read (const BigInt bi3, in uint pos1, const uint count);
bool BigInt_IsZero (const BigInt bi2, const uint pos);
void BigInt_Add (inout BigInt bi1, in uint right);
void BigInt_Write (inout BigInt bi4, in uint value, in uint pos2, const uint count1);
uint _BigInt_CalcBits (const BigInt bi5, const uint i);
uint TestAdd ();
uint TestRead ();
uint TestRead2 ();

//---------------------------------

uint ToMask (const uint x)
{
	return ( ((x < uint( 0u ))) ? (uint( 0u )) : (( ((x < uint( 32u ))) ? (((uint( 1u ) << x) - uint( 1u ))) : (uint( 4294967295u )) )) );
}


uint BitScanReverse (const uint x1)
{
	return uint( findMSB( x1 ) );
}


void BigInt_Create (out BigInt bi)
{
	for (uint c = uint( 0u ); (c < uint( 4u )); ++( c ))
	{
		(bi.value[c]) = uint( 0u );
	}
	;
	bi.lastBit = uint( 0u );
}


void BigInt_Add (inout BigInt bi1, in uint right)
{
	for (uint h = uint( 0u ); (h < uint( 4u )); ++( h ))
	{
		const uint prev = (bi1.value[h]);
		;
		((bi1.value[h]) += right);
		if (((bi1.value[h]) >= prev))
		{
			bi1.lastBit = max( bi1.lastBit, _BigInt_CalcBits(bi1, h) );
			break;
		;
		}
		;
		right = uint( 1u );
	}
	;
}


bool BigInt_IsZero (const BigInt bi2, const uint pos)
{
	return (pos >= bi2.lastBit);
}


uint BigInt_Read (const BigInt bi3, in uint pos1, const uint count)
{
	const uint k = clamp( (pos1 / uint( 32u )), uint( 0u ), uint( 3u ) );
	;
	(pos1 -= (uint( 32u ) * k));
	uint result = (((bi3.value[k]) >> pos1) & ToMask(count));
	;
	uint max_count = (uint( 32u ) - pos1);
	;
	if (((count > max_count) && ((k + uint( 1u )) < uint( 4u ))))
	{
		(result |= (((bi3.value[(k + uint( 1u ))]) & ToMask((count - max_count))) << max_count));
	;
	}
	;
	return result;
}


void BigInt_Write (inout BigInt bi4, in uint value, in uint pos2, const uint count1)
{
	uint m = clamp( (pos2 / uint( 32u )), uint( 0u ), uint( 3u ) );
	;
	(pos2 -= (uint( 32u ) * m));
	(value &= ToMask(count1));
	uint max_count1 = (uint( 32u ) - pos2);
	;
	((bi4.value[m]) |= (value << pos2));
	if (((count1 > max_count1) && ((m + uint( 1u )) < uint( 4u ))))
	{
		((bi4.value[++( m )]) |= (value >> max_count1));
	;
	}
	;
	bi4.lastBit = _BigInt_CalcBits(bi4, m);
}


uint _BigInt_CalcBits (const BigInt bi5, const uint i)
{
	return ((BitScanReverse((bi5.value[i])) + uint( 1u )) + (i * uint( 32u )));
}


uint TestAdd ()
{
	uint res = uint( 0u );
	;
	BigInt bi6;
	BigInt_Create(bi6);
	BigInt_Add(bi6, uint( 4294967290u ));
	BigInt_Add(bi6, uint( 4294967292u ));
	(res += uint( ((bi6.value[int( 0 )]) == uint( 4294967286u )) ));
	(res += uint( ((bi6.value[int( 1 )]) == uint( 1u )) ));
	BigInt_Add(bi6, uint( 4294967293u ));
	(res += uint( ((bi6.value[int( 0 )]) == uint( 4294967283u )) ));
	(res += uint( ((bi6.value[int( 1 )]) == uint( 2u )) ));
	return res;
}


uint TestRead ()
{
	uint res1 = uint( 0u );
	;
	BigInt bi7;
	BigInt_Create(bi7);
	(bi7.value[int( 0 )]) = uint( 4294967295u );
	(bi7.value[int( 1 )]) = uint( 65535u );
	bi7.lastBit = _BigInt_CalcBits(bi7, uint( 1u ));
	uint pos3 = uint( 44u );
	;
	uint count2 = uint( 8u );
	;
	uint readn = BigInt_Read(bi7, pos3, count2);
	;
	(res1 += uint( (readn == uint( 15u )) ));
	(res1 += uint( !( BigInt_IsZero(bi7, (pos3 + uint( 3u ))) ) ));
	(res1 += uint( BigInt_IsZero(bi7, (pos3 + uint( 4u ))) ));
	(res1 += uint( BigInt_IsZero(bi7, (pos3 + count2)) ));
	return res1;
}


uint TestRead2 ()
{
	uint res2 = uint( 0u );
	;
	BigInt bi8;
	BigInt_Create(bi8);
	(bi8.value[int( 0 )]) = uint( 4294967295u );
	(bi8.value[int( 1 )]) = uint( 291u );
	bi8.lastBit = _BigInt_CalcBits(bi8, uint( 1u ));
	uint pos4 = uint( 28u );
	;
	uint count3 = uint( 16u );
	;
	uint readn1 = BigInt_Read(bi8, pos4, count3);
	;
	(res2 += uint( (readn1 == uint( 4671u )) ));
	(res2 += uint( !( BigInt_IsZero(bi8, (pos4 + uint( 12u ))) ) ));
	(res2 += uint( BigInt_IsZero(bi8, (pos4 + uint( 13u ))) ));
	(res2 += uint( BigInt_IsZero(bi8, (pos4 + count3)) ));
	pos4 = uint( 0u );
	count3 = uint( 4u );
	readn1 = BigInt_Read(bi8, pos4, count3);
	(res2 += uint( (readn1 == uint( 15u )) ));
	return res2;
}


uint TestLastBit ()
{
	uint res3 = uint( 0u );
	;
	BigInt bi9;
	BigInt_Create(bi9);
	(res3 += uint( (bi9.lastBit == uint( 0u )) ));
	BigInt_Add(bi9, uint( 0u ));
	(res3 += uint( (bi9.lastBit == uint( 0u )) ));
	BigInt_Add(bi9, uint( 1u ));
	(res3 += uint( (bi9.lastBit == uint( 1u )) ));
	BigInt_Add(bi9, uint( 4294967295u ));
	(res3 += uint( (bi9.lastBit == uint( 33u )) ));
	return res3;
}


uint TestWrite ()
{
	uint res4 = uint( 0u );
	;
	uint pos5 = uint( 28u );
	;
	uint count4 = uint( 16u );
	;
	uint value1 = uint( 62805u );
	;
	BigInt bi10;
	BigInt_Create(bi10);
	BigInt_Write(bi10, value1, pos5, count4);
	uint readn2 = BigInt_Read(bi10, pos5, count4);
	;
	(res4 += uint( (bi10.lastBit == (pos5 + count4)) ));
	(res4 += uint( (readn2 == value1) ));
	return res4;
}


void main ()
{
	uint res5 = uint( 130u );
	;
	(res5 -= TestAdd());
	(res5 -= TestRead());
	(res5 -= TestRead2());
	(res5 -= TestLastBit());
	(res5 -= TestWrite());
	ssb.result = res5;
}


)#"_str );
	descr.Compute().ArraySPIRV({ 
0x07230203, 0x00010000, 0x00080006, 0x00000211, 0x00000000, 0x00020011, 0x00000001, 0x0006000B, 0x00000002, 0x4C534C47, 0x6474732E, 0x3035342E, 
0x00000000, 0x0003000E, 0x00000000, 0x00000001, 0x0005000F, 0x00000005, 0x00000005, 0x6E69616D, 0x00000000, 0x00060010, 0x00000005, 0x00000011, 
0x00000001, 0x00000001, 0x00000001, 0x00030007, 0x00000001, 0x00000000, 0x002D0003, 0x00000002, 0x000001C2, 0x00000001, 0x4F202F2F, 0x646F4D70, 
0x50656C75, 0x65636F72, 0x64657373, 0x746E6520, 0x702D7972, 0x746E696F, 0x69616D20, 0x2F2F0A6E, 0x4D704F20, 0x6C75646F, 0x6F725065, 0x73736563, 
0x63206465, 0x6E65696C, 0x706F2074, 0x6C676E65, 0x0A303031, 0x4F202F2F, 0x646F4D70, 0x50656C75, 0x65636F72, 0x64657373, 0x72617420, 0x2D746567, 
0x20766E65, 0x6E65706F, 0x2F0A6C67, 0x704F202F, 0x75646F4D, 0x7250656C, 0x7365636F, 0x20646573, 0x72746E65, 0x6F702D79, 0x20746E69, 0x6E69616D, 
0x696C230A, 0x3120656E, 0x0000000A, 0x00040005, 0x00000005, 0x6E69616D, 0x00000000, 0x00050005, 0x0000000A, 0x614D6F54, 0x75286B73, 0x00003B31, 
0x00030005, 0x00000009, 0x00000078, 0x00070005, 0x0000000D, 0x53746942, 0x526E6163, 0x72657665, 0x75286573, 0x00003B31, 0x00030005, 0x0000000C, 
0x00003178, 0x00040005, 0x00000011, 0x49676942, 0x0000746E, 0x00050006, 0x00000011, 0x00000000, 0x756C6176, 0x00000065, 0x00050006, 0x00000011, 
0x00000001, 0x7473616C, 0x00746942, 0x000C0005, 0x00000015, 0x49676942, 0x435F746E, 0x74616572, 0x74732865, 0x74637572, 0x6769422D, 0x2D746E49, 
0x345B3175, 0x31752D5D, 0x00003B31, 0x00030005, 0x00000014, 0x00006962, 0x000C0005, 0x0000001B, 0x49676942, 0x415F746E, 0x73286464, 0x63757274, 
0x69422D74, 0x746E4967, 0x5B31752D, 0x752D5D34, 0x753B3131, 0x00003B31, 0x00030005, 0x00000019, 0x00316962, 0x00040005, 0x0000001A, 0x68676972, 
0x00000074, 0x000D0005, 0x00000021, 0x49676942, 0x495F746E, 0x72655A73, 0x7473286F, 0x74637572, 0x6769422D, 0x2D746E49, 0x345B3175, 0x31752D5D, 
0x31753B31, 0x0000003B, 0x00030005, 0x0000001F, 0x00326962, 0x00030005, 0x00000020, 0x00736F70, 0x000D0005, 0x00000027, 0x49676942, 0x525F746E, 
0x28646165, 0x75727473, 0x422D7463, 0x6E496769, 0x31752D74, 0x2D5D345B, 0x3B313175, 0x753B3175, 0x00003B31, 0x00030005, 0x00000024, 0x00336962, 
0x00040005, 0x00000025, 0x31736F70, 0x00000000, 0x00040005, 0x00000026, 0x6E756F63, 0x00000074, 0x000E0005, 0x0000002E, 0x49676942, 0x575F746E, 
0x65746972, 0x72747328, 0x2D746375, 0x49676942, 0x752D746E, 0x5D345B31, 0x3131752D, 0x3B31753B, 0x753B3175, 0x00003B31, 0x00030005, 0x0000002A, 
0x00346962, 0x00040005, 0x0000002B, 0x756C6176, 0x00000065, 0x00040005, 0x0000002C, 0x32736F70, 0x00000000, 0x00040005, 0x0000002D, 0x6E756F63, 
0x00003174, 0x000E0005, 0x00000033, 0x6769425F, 0x5F746E49, 0x636C6143, 0x73746942, 0x72747328, 0x2D746375, 0x49676942, 0x752D746E, 0x5D345B31, 
0x3131752D, 0x3B31753B, 0x00000000, 0x00030005, 0x00000031, 0x00356962, 0x00030005, 0x00000032, 0x00000069, 0x00050005, 0x00000036, 0x74736554, 
0x28646441, 0x00000000, 0x00050005, 0x00000038, 0x74736554, 0x64616552, 0x00000028, 0x00050005, 0x0000003A, 0x74736554, 0x64616552, 0x00002832, 
0x00060005, 0x0000003C, 0x74736554, 0x7473614C, 0x28746942, 0x00000000, 0x00050005, 0x0000003E, 0x74736554, 0x74697257, 0x00002865, 0x00030005, 
0x00000059, 0x00000063, 0x00030005, 0x00000068, 0x00000068, 0x00040005, 0x00000070, 0x76657270, 0x00000000, 0x00030005, 0x0000008F, 0x0000006B, 
0x00040005, 0x00000098, 0x75736572, 0x0000746C, 0x00050005, 0x0000009A, 0x65646E69, 0x6C626178, 0x00000065, 0x00050005, 0x000000A1, 0x5F78616D, 
0x6E756F63, 0x00000074, 0x00050005, 0x000000B0, 0x65646E69, 0x6C626178, 0x00000065, 0x00030005, 0x000000BE, 0x0000006D, 0x00050005, 0x000000C9, 
0x5F78616D, 0x6E756F63, 0x00003174, 0x00050005, 0x000000EB, 0x65646E69, 0x6C626178, 0x00000065, 0x00030005, 0x000000F4, 0x00736572, 0x00030005, 
0x000000F5, 0x00366962, 0x00040005, 0x000000F6, 0x61726170, 0x0000006D, 0x00040005, 0x000000FA, 0x61726170, 0x0000006D, 0x00040005, 0x000000FC, 
0x61726170, 0x0000006D, 0x00040005, 0x00000100, 0x61726170, 0x0000006D, 0x00040005, 0x00000102, 0x61726170, 0x0000006D, 0x00040005, 0x00000113, 
0x61726170, 0x0000006D, 0x00040005, 0x00000115, 0x61726170, 0x0000006D, 0x00040005, 0x00000129, 0x31736572, 0x00000000, 0x00030005, 0x0000012A, 
0x00376962, 0x00040005, 0x0000012B, 0x61726170, 0x0000006D, 0x00040005, 0x00000134, 0x33736F70, 0x00000000, 0x00040005, 0x00000136, 0x6E756F63, 
0x00003274, 0x00040005, 0x00000138, 0x64616572, 0x0000006E, 0x00040005, 0x0000013B, 0x61726170, 0x0000006D, 0x00040005, 0x0000015E, 0x32736572, 
0x00000000, 0x00030005, 0x0000015F, 0x00386962, 0x00040005, 0x00000160, 0x61726170, 0x0000006D, 0x00040005, 0x00000169, 0x34736F70, 0x00000000, 
0x00040005, 0x0000016B, 0x6E756F63, 0x00003374, 0x00040005, 0x0000016D, 0x64616572, 0x0000316E, 0x00040005, 0x00000170, 0x61726170, 0x0000006D, 
0x00040005, 0x00000194, 0x61726170, 0x0000006D, 0x00040005, 0x0000019F, 0x33736572, 0x00000000, 0x00030005, 0x000001A0, 0x00396962, 0x00040005, 
0x000001A1, 0x61726170, 0x0000006D, 0x00040005, 0x000001AA, 0x61726170, 0x0000006D, 0x00040005, 0x000001AC, 0x61726170, 0x0000006D, 0x00040005, 
0x000001B5, 0x61726170, 0x0000006D, 0x00040005, 0x000001B7, 0x61726170, 0x0000006D, 0x00040005, 0x000001C0, 0x61726170, 0x0000006D, 0x00040005, 
0x000001C2, 0x61726170, 0x0000006D, 0x00040005, 0x000001CF, 0x34736572, 0x00000000, 0x00040005, 0x000001D0, 0x35736F70, 0x00000000, 0x00040005, 
0x000001D1, 0x6E756F63, 0x00003474, 0x00040005, 0x000001D2, 0x756C6176, 0x00003165, 0x00040005, 0x000001D4, 0x30316962, 0x00000000, 0x00040005, 
0x000001D5, 0x61726170, 0x0000006D, 0x00040005, 0x000001D9, 0x61726170, 0x0000006D, 0x00040005, 0x000001DB, 0x61726170, 0x0000006D, 0x00040005, 
0x000001DD, 0x61726170, 0x0000006D, 0x00040005, 0x000001E1, 0x64616572, 0x0000326E, 0x00040005, 0x000001E4, 0x61726170, 0x0000006D, 0x00040005, 
0x000001F9, 0x35736572, 0x00000000, 0x00060005, 0x0000020B, 0x49676942, 0x6554746E, 0x535F7473, 0x004F4253, 0x00050006, 0x0000020B, 0x00000000, 
0x75736572, 0x0000746C, 0x00060006, 0x0000020B, 0x00000001, 0x6461705F, 0x676E6964, 0x00000030, 0x00060006, 0x0000020B, 0x00000002, 0x6461705F, 
0x676E6964, 0x00000031, 0x00060006, 0x0000020B, 0x00000003, 0x6461705F, 0x676E6964, 0x00000032, 0x00030005, 0x0000020D, 0x00627373, 0x00040048, 
0x0000020B, 0x00000000, 0x00000019, 0x00050048, 0x0000020B, 0x00000000, 0x00000023, 0x00000000, 0x00040048, 0x0000020B, 0x00000001, 0x00000019, 
0x00050048, 0x0000020B, 0x00000001, 0x00000023, 0x00000004, 0x00040048, 0x0000020B, 0x00000002, 0x00000019, 0x00050048, 0x0000020B, 0x00000002, 
0x00000023, 0x00000008, 0x00040048, 0x0000020B, 0x00000003, 0x00000019, 0x00050048, 0x0000020B, 0x00000003, 0x00000023, 0x0000000C, 0x00030047, 
0x0000020B, 0x00000003, 0x00040047, 0x0000020D, 0x00000022, 0x00000000, 0x00040047, 0x0000020D, 0x00000021, 0x00000000, 0x00020013, 0x00000003, 
0x00030021, 0x00000004, 0x00000003, 0x00040015, 0x00000007, 0x00000020, 0x00000000, 0x00040021, 0x00000008, 0x00000007, 0x00000007, 0x0004002B, 
0x00000007, 0x0000000F, 0x00000004, 0x0004001C, 0x00000010, 0x00000007, 0x0000000F, 0x0004001E, 0x00000011, 0x00000010, 0x00000007, 0x00040020, 
0x00000012, 0x00000007, 0x00000011, 0x00040021, 0x00000013, 0x00000003, 0x00000012, 0x00040020, 0x00000017, 0x00000007, 0x00000007, 0x00050021, 
0x00000018, 0x00000003, 0x00000012, 0x00000017, 0x00020014, 0x0000001D, 0x00050021, 0x0000001E, 0x0000001D, 0x00000011, 0x00000007, 0x00060021, 
0x00000023, 0x00000007, 0x00000011, 0x00000017, 0x00000007, 0x00070021, 0x00000029, 0x00000003, 0x00000012, 0x00000017, 0x00000017, 0x00000007, 
0x00050021, 0x00000030, 0x00000007, 0x00000011, 0x00000007, 0x00030021, 0x00000035, 0x00000007, 0x0004002B, 0x00000007, 0x00000040, 0x00000000, 
0x0004002B, 0x00000007, 0x00000046, 0x00000020, 0x0004002B, 0x00000007, 0x0000004B, 0x00000001, 0x0004002B, 0x00000007, 0x0000004F, 0xFFFFFFFF, 
0x00040015, 0x00000054, 0x00000020, 0x00000001, 0x0004002B, 0x00000054, 0x00000061, 0x00000000, 0x0004002B, 0x00000054, 0x00000065, 0x00000001, 
0x0004002B, 0x00000007, 0x00000092, 0x00000003, 0x0004002B, 0x00000007, 0x000000F9, 0xFFFFFFFA, 0x0004002B, 0x00000007, 0x000000FF, 0xFFFFFFFC, 
0x0004002B, 0x00000007, 0x00000107, 0xFFFFFFF6, 0x0004002B, 0x00000007, 0x00000112, 0xFFFFFFFD, 0x0004002B, 0x00000007, 0x0000011A, 0xFFFFFFF3, 
0x0004002B, 0x00000007, 0x00000121, 0x00000002, 0x0004002B, 0x00000007, 0x0000012F, 0x0000FFFF, 0x0004002B, 0x00000007, 0x00000135, 0x0000002C, 
0x0004002B, 0x00000007, 0x00000137, 0x00000008, 0x0004002B, 0x00000007, 0x0000013F, 0x0000000F, 0x0004002B, 0x00000007, 0x00000164, 0x00000123, 
0x0004002B, 0x00000007, 0x0000016A, 0x0000001C, 0x0004002B, 0x00000007, 0x0000016C, 0x00000010, 0x0004002B, 0x00000007, 0x00000174, 0x0000123F, 
0x0004002B, 0x00000007, 0x0000017B, 0x0000000C, 0x0004002B, 0x00000007, 0x00000184, 0x0000000D, 0x0004002B, 0x00000007, 0x000001C7, 0x00000021, 
0x0004002B, 0x00000007, 0x000001D3, 0x0000F555, 0x0004002B, 0x00000007, 0x000001FA, 0x00000082, 0x00030016, 0x0000020A, 0x00000020, 0x0006001E, 
0x0000020B, 0x00000007, 0x0000020A, 0x0000020A, 0x0000020A, 0x00040020, 0x0000020C, 0x00000002, 0x0000020B, 0x0004003B, 0x0000020C, 0x0000020D, 
0x00000002, 0x00040020, 0x0000020F, 0x00000002, 0x00000007, 0x00050036, 0x00000003, 0x00000005, 0x00000000, 0x00000004, 0x000200F8, 0x00000006, 
0x0004003B, 0x00000017, 0x000001F9, 0x00000007, 0x00040008, 0x00000001, 0x000000EE, 0x00000000, 0x0003003E, 0x000001F9, 0x000001FA, 0x00040008, 
0x00000001, 0x000000F0, 0x00000000, 0x00040039, 0x00000007, 0x000001FB, 0x00000036, 0x0004003D, 0x00000007, 0x000001FC, 0x000001F9, 0x00050082, 
0x00000007, 0x000001FD, 0x000001FC, 0x000001FB, 0x0003003E, 0x000001F9, 0x000001FD, 0x00040008, 0x00000001, 0x000000F1, 0x00000000, 0x00040039, 
0x00000007, 0x000001FE, 0x00000038, 0x0004003D, 0x00000007, 0x000001FF, 0x000001F9, 0x00050082, 0x00000007, 0x00000200, 0x000001FF, 0x000001FE, 
0x0003003E, 0x000001F9, 0x00000200, 0x00040008, 0x00000001, 0x000000F2, 0x00000000, 0x00040039, 0x00000007, 0x00000201, 0x0000003A, 0x0004003D, 
0x00000007, 0x00000202, 0x000001F9, 0x00050082, 0x00000007, 0x00000203, 0x00000202, 0x00000201, 0x0003003E, 0x000001F9, 0x00000203, 0x00040008, 
0x00000001, 0x000000F3, 0x00000000, 0x00040039, 0x00000007, 0x00000204, 0x0000003C, 0x0004003D, 0x00000007, 0x00000205, 0x000001F9, 0x00050082, 
0x00000007, 0x00000206, 0x00000205, 0x00000204, 0x0003003E, 0x000001F9, 0x00000206, 0x00040008, 0x00000001, 0x000000F4, 0x00000000, 0x00040039, 
0x00000007, 0x00000207, 0x0000003E, 0x0004003D, 0x00000007, 0x00000208, 0x000001F9, 0x00050082, 0x00000007, 0x00000209, 0x00000208, 0x00000207, 
0x0003003E, 0x000001F9, 0x00000209, 0x00040008, 0x00000001, 0x000000F5, 0x00000000, 0x0004003D, 0x00000007, 0x0000020E, 0x000001F9, 0x00050041, 
0x0000020F, 0x00000210, 0x0000020D, 0x00000061, 0x0003003E, 0x00000210, 0x0000020E, 0x000100FD, 0x00010038, 0x00050036, 0x00000007, 0x0000000A, 
0x00000000, 0x00000008, 0x00030037, 0x00000007, 0x00000009, 0x000200F8, 0x0000000B, 0x0004003B, 0x00000017, 0x00000042, 0x00000007, 0x0004003B, 
0x00000017, 0x00000048, 0x00000007, 0x00040008, 0x00000001, 0x00000028, 0x00000000, 0x000500B0, 0x0000001D, 0x00000041, 0x00000009, 0x00000040, 
0x000300F7, 0x00000044, 0x00000000, 0x000400FA, 0x00000041, 0x00000043, 0x00000045, 0x000200F8, 0x00000043, 0x0003003E, 0x00000042, 0x00000040, 
0x000200F9, 0x00000044, 0x000200F8, 0x00000045, 0x000500B0, 0x0000001D, 0x00000047, 0x00000009, 0x00000046, 0x000300F7, 0x0000004A, 0x00000000, 
0x000400FA, 0x00000047, 0x00000049, 0x0000004E, 0x000200F8, 0x00000049, 0x000500C4, 0x00000007, 0x0000004C, 0x0000004B, 0x00000009, 0x00050082, 
0x00000007, 0x0000004D, 0x0000004C, 0x0000004B, 0x0003003E, 0x00000048, 0x0000004D, 0x000200F9, 0x0000004A, 0x000200F8, 0x0000004E, 0x0003003E, 
0x00000048, 0x0000004F, 0x000200F9, 0x0000004A, 0x000200F8, 0x0000004A, 0x0004003D, 0x00000007, 0x00000050, 0x00000048, 0x0003003E, 0x00000042, 
0x00000050, 0x000200F9, 0x00000044, 0x000200F8, 0x00000044, 0x0004003D, 0x00000007, 0x00000051, 0x00000042, 0x000200FE, 0x00000051, 0x00010038, 
0x00050036, 0x00000007, 0x0000000D, 0x00000000, 0x00000008, 0x00030037, 0x00000007, 0x0000000C, 0x000200F8, 0x0000000E, 0x00040008, 0x00000001, 
0x0000002E, 0x00000000, 0x0006000C, 0x00000054, 0x00000055, 0x00000002, 0x0000004B, 0x0000000C, 0x0004007C, 0x00000007, 0x00000056, 0x00000055, 
0x000200FE, 0x00000056, 0x00010038, 0x00050036, 0x00000003, 0x00000015, 0x00000000, 0x00000013, 0x00030037, 0x00000012, 0x00000014, 0x000200F8, 
0x00000016, 0x0004003B, 0x00000017, 0x00000059, 0x00000007, 0x00040008, 0x00000001, 0x00000034, 0x00000000, 0x0003003E, 0x00000059, 0x00000040, 
0x000200F9, 0x0000005A, 0x000200F8, 0x0000005A, 0x000400F6, 0x0000005C, 0x0000005D, 0x00000000, 0x000200F9, 0x0000005E, 0x000200F8, 0x0000005E, 
0x0004003D, 0x00000007, 0x0000005F, 0x00000059, 0x000500B0, 0x0000001D, 0x00000060, 0x0000005F, 0x0000000F, 0x000400FA, 0x00000060, 0x0000005B, 
0x0000005C, 0x000200F8, 0x0000005B, 0x00040008, 0x00000001, 0x00000036, 0x00000000, 0x0004003D, 0x00000007, 0x00000062, 0x00000059, 0x00060041, 
0x00000017, 0x00000063, 0x00000014, 0x00000061, 0x00000062, 0x0003003E, 0x00000063, 0x00000040, 0x000200F9, 0x0000005D, 0x000200F8, 0x0000005D, 
0x00040008, 0x00000001, 0x00000034, 0x00000000, 0x0004003D, 0x00000007, 0x00000064, 0x00000059, 0x00050080, 0x00000007, 0x00000066, 0x00000064, 
0x00000065, 0x0003003E, 0x00000059, 0x00000066, 0x000200F9, 0x0000005A, 0x000200F8, 0x0000005C, 0x00040008, 0x00000001, 0x00000039, 0x00000000, 
0x00050041, 0x00000017, 0x00000067, 0x00000014, 0x00000065, 0x0003003E, 0x00000067, 0x00000040, 0x000100FD, 0x00010038, 0x00050036, 0x00000003, 
0x0000001B, 0x00000000, 0x00000018, 0x00030037, 0x00000012, 0x00000019, 0x00030037, 0x00000017, 0x0000001A, 0x000200F8, 0x0000001C, 0x0004003B, 
0x00000017, 0x00000068, 0x00000007, 0x0004003B, 0x00000017, 0x00000070, 0x00000007, 0x00040008, 0x00000001, 0x0000003F, 0x00000000, 0x0003003E, 
0x00000068, 0x00000040, 0x000200F9, 0x00000069, 0x000200F8, 0x00000069, 0x000400F6, 0x0000006B, 0x0000006C, 0x00000000, 0x000200F9, 0x0000006D, 
0x000200F8, 0x0000006D, 0x0004003D, 0x00000007, 0x0000006E, 0x00000068, 0x000500B0, 0x0000001D, 0x0000006F, 0x0000006E, 0x0000000F, 0x000400FA, 
0x0000006F, 0x0000006A, 0x0000006B, 0x000200F8, 0x0000006A, 0x00040008, 0x00000001, 0x00000041, 0x00000000, 0x0004003D, 0x00000007, 0x00000071, 
0x00000068, 0x00060041, 0x00000017, 0x00000072, 0x00000019, 0x00000061, 0x00000071, 0x0004003D, 0x00000007, 0x00000073, 0x00000072, 0x0003003E, 
0x00000070, 0x00000073, 0x00040008, 0x00000001, 0x00000043, 0x00000000, 0x0004003D, 0x00000007, 0x00000074, 0x00000068, 0x0004003D, 0x00000007, 
0x00000075, 0x0000001A, 0x00060041, 0x00000017, 0x00000076, 0x00000019, 0x00000061, 0x00000074, 0x0004003D, 0x00000007, 0x00000077, 0x00000076, 
0x00050080, 0x00000007, 0x00000078, 0x00000077, 0x00000075, 0x00060041, 0x00000017, 0x00000079, 0x00000019, 0x00000061, 0x00000074, 0x0003003E, 
0x00000079, 0x00000078, 0x00040008, 0x00000001, 0x00000044, 0x00000000, 0x0004003D, 0x00000007, 0x0000007A, 0x00000068, 0x00060041, 0x00000017, 
0x0000007B, 0x00000019, 0x00000061, 0x0000007A, 0x0004003D, 0x00000007, 0x0000007C, 0x0000007B, 0x0004003D, 0x00000007, 0x0000007D, 0x00000070, 
0x000500AE, 0x0000001D, 0x0000007E, 0x0000007C, 0x0000007D, 0x000300F7, 0x00000080, 0x00000000, 0x000400FA, 0x0000007E, 0x0000007F, 0x00000080, 
0x000200F8, 0x0000007F, 0x00040008, 0x00000001, 0x00000046, 0x00000000, 0x00050041, 0x00000017, 0x00000081, 0x00000019, 0x00000065, 0x0004003D, 
0x00000007, 0x00000082, 0x00000081, 0x0004003D, 0x00000011, 0x00000083, 0x00000019, 0x0004003D, 0x00000007, 0x00000084, 0x00000068, 0x00060039, 
0x00000007, 0x00000085, 0x00000033, 0x00000083, 0x00000084, 0x0007000C, 0x00000007, 0x00000086, 0x00000002, 0x00000029, 0x00000082, 0x00000085, 
0x00050041, 0x00000017, 0x00000087, 0x00000019, 0x00000065, 0x0003003E, 0x00000087, 0x00000086, 0x00040008, 0x00000001, 0x00000047, 0x00000000, 
0x000200F9, 0x0000006B, 0x000200F8, 0x00000080, 0x00040008, 0x00000001, 0x0000004B, 0x00000000, 0x0003003E, 0x0000001A, 0x0000004B, 0x000200F9, 
0x0000006C, 0x000200F8, 0x0000006C, 0x00040008, 0x00000001, 0x0000003F, 0x00000000, 0x0004003D, 0x00000007, 0x00000089, 0x00000068, 0x00050080, 
0x00000007, 0x0000008A, 0x00000089, 0x00000065, 0x0003003E, 0x00000068, 0x0000008A, 0x000200F9, 0x00000069, 0x000200F8, 0x0000006B, 0x000100FD, 
0x00010038, 0x00050036, 0x0000001D, 0x00000021, 0x00000000, 0x0000001E, 0x00030037, 0x00000011, 0x0000001F, 0x00030037, 0x00000007, 0x00000020, 
0x000200F8, 0x00000022, 0x00040008, 0x00000001, 0x00000053, 0x00000000, 0x00050051, 0x00000007, 0x0000008B, 0x0000001F, 0x00000001, 0x000500AE, 
0x0000001D, 0x0000008C, 0x00000020, 0x0000008B, 0x000200FE, 0x0000008C, 0x00010038, 0x00050036, 0x00000007, 0x00000027, 0x00000000, 0x00000023, 
0x00030037, 0x00000011, 0x00000024, 0x00030037, 0x00000017, 0x00000025, 0x00030037, 0x00000007, 0x00000026, 0x000200F8, 0x00000028, 0x0004003B, 
0x00000017, 0x0000008F, 0x00000007, 0x0004003B, 0x00000017, 0x00000098, 0x00000007, 0x0004003B, 0x00000012, 0x0000009A, 0x00000007, 0x0004003B, 
0x00000017, 0x000000A1, 0x00000007, 0x0004003B, 0x00000012, 0x000000B0, 0x00000007, 0x00040008, 0x00000001, 0x00000059, 0x00000000, 0x0004003D, 
0x00000007, 0x00000090, 0x00000025, 0x00050086, 0x00000007, 0x00000091, 0x00000090, 0x00000046, 0x0008000C, 0x00000007, 0x00000093, 0x00000002, 
0x0000002C, 0x00000091, 0x00000040, 0x00000092, 0x0003003E, 0x0000008F, 0x00000093, 0x00040008, 0x00000001, 0x0000005B, 0x00000000, 0x0004003D, 
0x00000007, 0x00000094, 0x0000008F, 0x00050084, 0x00000007, 0x00000095, 0x00000046, 0x00000094, 0x0004003D, 0x00000007, 0x00000096, 0x00000025, 
0x00050082, 0x00000007, 0x00000097, 0x00000096, 0x00000095, 0x0003003E, 0x00000025, 0x00000097, 0x00040008, 0x00000001, 0x0000005C, 0x00000000, 
0x0004003D, 0x00000007, 0x00000099, 0x0000008F, 0x0003003E, 0x0000009A, 0x00000024, 0x00060041, 0x00000017, 0x0000009B, 0x0000009A, 0x00000061, 
0x00000099, 0x0004003D, 0x00000007, 0x0000009C, 0x0000009B, 0x0004003D, 0x00000007, 0x0000009D, 0x00000025, 0x000500C2, 0x00000007, 0x0000009E, 
0x0000009C, 0x0000009D, 0x00050039, 0x00000007, 0x0000009F, 0x0000000A, 0x00000026, 0x000500C7, 0x00000007, 0x000000A0, 0x0000009E, 0x0000009F, 
0x0003003E, 0x00000098, 0x000000A0, 0x00040008, 0x00000001, 0x0000005E, 0x00000000, 0x0004003D, 0x00000007, 0x000000A2, 0x00000025, 0x00050082, 
0x00000007, 0x000000A3, 0x00000046, 0x000000A2, 0x0003003E, 0x000000A1, 0x000000A3, 0x00040008, 0x00000001, 0x00000060, 0x00000000, 0x0004003D, 
0x00000007, 0x000000A4, 0x000000A1, 0x000500AC, 0x0000001D, 0x000000A5, 0x00000026, 0x000000A4, 0x000300F7, 0x000000A7, 0x00000000, 0x000400FA, 
0x000000A5, 0x000000A6, 0x000000A7, 0x000200F8, 0x000000A6, 0x0004003D, 0x00000007, 0x000000A8, 0x0000008F, 0x00050080, 0x00000007, 0x000000A9, 
0x000000A8, 0x0000004B, 0x000500B0, 0x0000001D, 0x000000AA, 0x000000A9, 0x0000000F, 0x000200F9, 0x000000A7, 0x000200F8, 0x000000A7, 0x000700F5, 
0x0000001D, 0x000000AB, 0x000000A5, 0x00000028, 0x000000AA, 0x000000A6, 0x000300F7, 0x000000AD, 0x00000000, 0x000400FA, 0x000000AB, 0x000000AC, 
0x000000AD, 0x000200F8, 0x000000AC, 0x00040008, 0x00000001, 0x00000062, 0x00000000, 0x0004003D, 0x00000007, 0x000000AE, 0x0000008F, 0x00050080, 
0x00000007, 0x000000AF, 0x000000AE, 0x0000004B, 0x0003003E, 0x000000B0, 0x00000024, 0x00060041, 0x00000017, 0x000000B1, 0x000000B0, 0x00000061, 
0x000000AF, 0x0004003D, 0x00000007, 0x000000B2, 0x000000B1, 0x0004003D, 0x00000007, 0x000000B3, 0x000000A1, 0x00050082, 0x00000007, 0x000000B4, 
0x00000026, 0x000000B3, 0x00050039, 0x00000007, 0x000000B5, 0x0000000A, 0x000000B4, 0x000500C7, 0x00000007, 0x000000B6, 0x000000B2, 0x000000B5, 
0x0004003D, 0x00000007, 0x000000B7, 0x000000A1, 0x000500C4, 0x00000007, 0x000000B8, 0x000000B6, 0x000000B7, 0x0004003D, 0x00000007, 0x000000B9, 
0x00000098, 0x000500C5, 0x00000007, 0x000000BA, 0x000000B9, 0x000000B8, 0x0003003E, 0x00000098, 0x000000BA, 0x000200F9, 0x000000AD, 0x000200F8, 
0x000000AD, 0x00040008, 0x00000001, 0x00000066, 0x00000000, 0x0004003D, 0x00000007, 0x000000BB, 0x00000098, 0x000200FE, 0x000000BB, 0x00010038, 
0x00050036, 0x00000003, 0x0000002E, 0x00000000, 0x00000029, 0x00030037, 0x00000012, 0x0000002A, 0x00030037, 0x00000017, 0x0000002B, 0x00030037, 
0x00000017, 0x0000002C, 0x00030037, 0x00000007, 0x0000002D, 0x000200F8, 0x0000002F, 0x0004003B, 0x00000017, 0x000000BE, 0x00000007, 0x0004003B, 
0x00000017, 0x000000C9, 0x00000007, 0x00040008, 0x00000001, 0x0000006C, 0x00000000, 0x0004003D, 0x00000007, 0x000000BF, 0x0000002C, 0x00050086, 
0x00000007, 0x000000C0, 0x000000BF, 0x00000046, 0x0008000C, 0x00000007, 0x000000C1, 0x00000002, 0x0000002C, 0x000000C0, 0x00000040, 0x00000092, 
0x0003003E, 0x000000BE, 0x000000C1, 0x00040008, 0x00000001, 0x0000006E, 0x00000000, 0x0004003D, 0x00000007, 0x000000C2, 0x000000BE, 0x00050084, 
0x00000007, 0x000000C3, 0x00000046, 0x000000C2, 0x0004003D, 0x00000007, 0x000000C4, 0x0000002C, 0x00050082, 0x00000007, 0x000000C5, 0x000000C4, 
0x000000C3, 0x0003003E, 0x0000002C, 0x000000C5, 0x00040008, 0x00000001, 0x0000006F, 0x00000000, 0x00050039, 0x00000007, 0x000000C6, 0x0000000A, 
0x0000002D, 0x0004003D, 0x00000007, 0x000000C7, 0x0000002B, 0x000500C7, 0x00000007, 0x000000C8, 0x000000C7, 0x000000C6, 0x0003003E, 0x0000002B, 
0x000000C8, 0x00040008, 0x00000001, 0x00000070, 0x00000000, 0x0004003D, 0x00000007, 0x000000CA, 0x0000002C, 0x00050082, 0x00000007, 0x000000CB, 
0x00000046, 0x000000CA, 0x0003003E, 0x000000C9, 0x000000CB, 0x00040008, 0x00000001, 0x00000072, 0x00000000, 0x0004003D, 0x00000007, 0x000000CC, 
0x000000BE, 0x0004003D, 0x00000007, 0x000000CD, 0x0000002B, 0x0004003D, 0x00000007, 0x000000CE, 0x0000002C, 0x000500C4, 0x00000007, 0x000000CF, 
0x000000CD, 0x000000CE, 0x00060041, 0x00000017, 0x000000D0, 0x0000002A, 0x00000061, 0x000000CC, 0x0004003D, 0x00000007, 0x000000D1, 0x000000D0, 
0x000500C5, 0x00000007, 0x000000D2, 0x000000D1, 0x000000CF, 0x00060041, 0x00000017, 0x000000D3, 0x0000002A, 0x00000061, 0x000000CC, 0x0003003E, 
0x000000D3, 0x000000D2, 0x00040008, 0x00000001, 0x00000073, 0x00000000, 0x0004003D, 0x00000007, 0x000000D4, 0x000000C9, 0x000500AC, 0x0000001D, 
0x000000D5, 0x0000002D, 0x000000D4, 0x000300F7, 0x000000D7, 0x00000000, 0x000400FA, 0x000000D5, 0x000000D6, 0x000000D7, 0x000200F8, 0x000000D6, 
0x0004003D, 0x00000007, 0x000000D8, 0x000000BE, 0x00050080, 0x00000007, 0x000000D9, 0x000000D8, 0x0000004B, 0x000500B0, 0x0000001D, 0x000000DA, 
0x000000D9, 0x0000000F, 0x000200F9, 0x000000D7, 0x000200F8, 0x000000D7, 0x000700F5, 0x0000001D, 0x000000DB, 0x000000D5, 0x0000002F, 0x000000DA, 
0x000000D6, 0x000300F7, 0x000000DD, 0x00000000, 0x000400FA, 0x000000DB, 0x000000DC, 0x000000DD, 0x000200F8, 0x000000DC, 0x00040008, 0x00000001, 
0x00000075, 0x00000000, 0x0004003D, 0x00000007, 0x000000DE, 0x000000BE, 0x00050080, 0x00000007, 0x000000DF, 0x000000DE, 0x00000065, 0x0003003E, 
0x000000BE, 0x000000DF, 0x0004003D, 0x00000007, 0x000000E0, 0x0000002B, 0x0004003D, 0x00000007, 0x000000E1, 0x000000C9, 0x000500C2, 0x00000007, 
0x000000E2, 0x000000E0, 0x000000E1, 0x00060041, 0x00000017, 0x000000E3, 0x0000002A, 0x00000061, 0x000000DF, 0x0004003D, 0x00000007, 0x000000E4, 
0x000000E3, 0x000500C5, 0x00000007, 0x000000E5, 0x000000E4, 0x000000E2, 0x00060041, 0x00000017, 0x000000E6, 0x0000002A, 0x00000061, 0x000000DF, 
0x0003003E, 0x000000E6, 0x000000E5, 0x000200F9, 0x000000DD, 0x000200F8, 0x000000DD, 0x00040008, 0x00000001, 0x00000079, 0x00000000, 0x0004003D, 
0x00000011, 0x000000E7, 0x0000002A, 0x0004003D, 0x00000007, 0x000000E8, 0x000000BE, 0x00060039, 0x00000007, 0x000000E9, 0x00000033, 0x000000E7, 
0x000000E8, 0x00050041, 0x00000017, 0x000000EA, 0x0000002A, 0x00000065, 0x0003003E, 0x000000EA, 0x000000E9, 0x000100FD, 0x00010038, 0x00050036, 
0x00000007, 0x00000033, 0x00000000, 0x00000030, 0x00030037, 0x00000011, 0x00000031, 0x00030037, 0x00000007, 0x00000032, 0x000200F8, 0x00000034, 
0x0004003B, 0x00000012, 0x000000EB, 0x00000007, 0x00040008, 0x00000001, 0x0000007F, 0x00000000, 0x0003003E, 0x000000EB, 0x00000031, 0x00060041, 
0x00000017, 0x000000EC, 0x000000EB, 0x00000061, 0x00000032, 0x0004003D, 0x00000007, 0x000000ED, 0x000000EC, 0x00050039, 0x00000007, 0x000000EE, 
0x0000000D, 0x000000ED, 0x00050080, 0x00000007, 0x000000EF, 0x000000EE, 0x0000004B, 0x00050084, 0x00000007, 0x000000F0, 0x00000032, 0x00000046, 
0x00050080, 0x00000007, 0x000000F1, 0x000000EF, 0x000000F0, 0x000200FE, 0x000000F1, 0x00010038, 0x00050036, 0x00000007, 0x00000036, 0x00000000, 
0x00000035, 0x000200F8, 0x00000037, 0x0004003B, 0x00000017, 0x000000F4, 0x00000007, 0x0004003B, 0x00000012, 0x000000F5, 0x00000007, 0x0004003B, 
0x00000012, 0x000000F6, 0x00000007, 0x0004003B, 0x00000012, 0x000000FA, 0x00000007, 0x0004003B, 0x00000017, 0x000000FC, 0x00000007, 0x0004003B, 
0x00000012, 0x00000100, 0x00000007, 0x0004003B, 0x00000017, 0x00000102, 0x00000007, 0x0004003B, 0x00000012, 0x00000113, 0x00000007, 0x0004003B, 
0x00000017, 0x00000115, 0x00000007, 0x00040008, 0x00000001, 0x00000085, 0x00000000, 0x0003003E, 0x000000F4, 0x00000040, 0x00040008, 0x00000001, 
0x00000088, 0x00000000, 0x00050039, 0x00000003, 0x000000F7, 0x00000015, 0x000000F6, 0x0004003D, 0x00000011, 0x000000F8, 0x000000F6, 0x0003003E, 
0x000000F5, 0x000000F8, 0x00040008, 0x00000001, 0x00000089, 0x00000000, 0x0004003D, 0x00000011, 0x000000FB, 0x000000F5, 0x0003003E, 0x000000FA, 
0x000000FB, 0x0003003E, 0x000000FC, 0x000000F9, 0x00060039, 0x00000003, 0x000000FD, 0x0000001B, 0x000000FA, 0x000000FC, 0x0004003D, 0x00000011, 
0x000000FE, 0x000000FA, 0x0003003E, 0x000000F5, 0x000000FE, 0x00040008, 0x00000001, 0x0000008A, 0x00000000, 0x0004003D, 0x00000011, 0x00000101, 
0x000000F5, 0x0003003E, 0x00000100, 0x00000101, 0x0003003E, 0x00000102, 0x000000FF, 0x00060039, 0x00000003, 0x00000103, 0x0000001B, 0x00000100, 
0x00000102, 0x0004003D, 0x00000011, 0x00000104, 0x00000100, 0x0003003E, 0x000000F5, 0x00000104, 0x00040008, 0x00000001, 0x0000008B, 0x00000000, 
0x00060041, 0x00000017, 0x00000105, 0x000000F5, 0x00000061, 0x00000061, 0x0004003D, 0x00000007, 0x00000106, 0x00000105, 0x000500AA, 0x0000001D, 
0x00000108, 0x00000106, 0x00000107, 0x000600A9, 0x00000007, 0x00000109, 0x00000108, 0x0000004B, 0x00000040, 0x0004003D, 0x00000007, 0x0000010A, 
0x000000F4, 0x00050080, 0x00000007, 0x0000010B, 0x0000010A, 0x00000109, 0x0003003E, 0x000000F4, 0x0000010B, 0x00040008, 0x00000001, 0x0000008C, 
0x00000000, 0x00060041, 0x00000017, 0x0000010C, 0x000000F5, 0x00000061, 0x00000065, 0x0004003D, 0x00000007, 0x0000010D, 0x0000010C, 0x000500AA, 
0x0000001D, 0x0000010E, 0x0000010D, 0x0000004B, 0x000600A9, 0x00000007, 0x0000010F, 0x0000010E, 0x0000004B, 0x00000040, 0x0004003D, 0x00000007, 
0x00000110, 0x000000F4, 0x00050080, 0x00000007, 0x00000111, 0x00000110, 0x0000010F, 0x0003003E, 0x000000F4, 0x00000111, 0x00040008, 0x00000001, 
0x0000008D, 0x00000000, 0x0004003D, 0x00000011, 0x00000114, 0x000000F5, 0x0003003E, 0x00000113, 0x00000114, 0x0003003E, 0x00000115, 0x00000112, 
0x00060039, 0x00000003, 0x00000116, 0x0000001B, 0x00000113, 0x00000115, 0x0004003D, 0x00000011, 0x00000117, 0x00000113, 0x0003003E, 0x000000F5, 
0x00000117, 0x00040008, 0x00000001, 0x0000008E, 0x00000000, 0x00060041, 0x00000017, 0x00000118, 0x000000F5, 0x00000061, 0x00000061, 0x0004003D, 
0x00000007, 0x00000119, 0x00000118, 0x000500AA, 0x0000001D, 0x0000011B, 0x00000119, 0x0000011A, 0x000600A9, 0x00000007, 0x0000011C, 0x0000011B, 
0x0000004B, 0x00000040, 0x0004003D, 0x00000007, 0x0000011D, 0x000000F4, 0x00050080, 0x00000007, 0x0000011E, 0x0000011D, 0x0000011C, 0x0003003E, 
0x000000F4, 0x0000011E, 0x00040008, 0x00000001, 0x0000008F, 0x00000000, 0x00060041, 0x00000017, 0x0000011F, 0x000000F5, 0x00000061, 0x00000065, 
0x0004003D, 0x00000007, 0x00000120, 0x0000011F, 0x000500AA, 0x0000001D, 0x00000122, 0x00000120, 0x00000121, 0x000600A9, 0x00000007, 0x00000123, 
0x00000122, 0x0000004B, 0x00000040, 0x0004003D, 0x00000007, 0x00000124, 0x000000F4, 0x00050080, 0x00000007, 0x00000125, 0x00000124, 0x00000123, 
0x0003003E, 0x000000F4, 0x00000125, 0x00040008, 0x00000001, 0x00000090, 0x00000000, 0x0004003D, 0x00000007, 0x00000126, 0x000000F4, 0x000200FE, 
0x00000126, 0x00010038, 0x00050036, 0x00000007, 0x00000038, 0x00000000, 0x00000035, 0x000200F8, 0x00000039, 0x0004003B, 0x00000017, 0x00000129, 
0x00000007, 0x0004003B, 0x00000012, 0x0000012A, 0x00000007, 0x0004003B, 0x00000012, 0x0000012B, 0x00000007, 0x0004003B, 0x00000017, 0x00000134, 
0x00000007, 0x0004003B, 0x00000017, 0x00000136, 0x00000007, 0x0004003B, 0x00000017, 0x00000138, 0x00000007, 0x0004003B, 0x00000017, 0x0000013B, 
0x00000007, 0x00040008, 0x00000001, 0x00000096, 0x00000000, 0x0003003E, 0x00000129, 0x00000040, 0x00040008, 0x00000001, 0x00000099, 0x00000000, 
0x00050039, 0x00000003, 0x0000012C, 0x00000015, 0x0000012B, 0x0004003D, 0x00000011, 0x0000012D, 0x0000012B, 0x0003003E, 0x0000012A, 0x0000012D, 
0x00040008, 0x00000001, 0x0000009A, 0x00000000, 0x00060041, 0x00000017, 0x0000012E, 0x0000012A, 0x00000061, 0x00000061, 0x0003003E, 0x0000012E, 
0x0000004F, 0x00040008, 0x00000001, 0x0000009B, 0x00000000, 0x00060041, 0x00000017, 0x00000130, 0x0000012A, 0x00000061, 0x00000065, 0x0003003E, 
0x00000130, 0x0000012F, 0x00040008, 0x00000001, 0x0000009C, 0x00000000, 0x0004003D, 0x00000011, 0x00000131, 0x0000012A, 0x00060039, 0x00000007, 
0x00000132, 0x00000033, 0x00000131, 0x0000004B, 0x00050041, 0x00000017, 0x00000133, 0x0000012A, 0x00000065, 0x0003003E, 0x00000133, 0x00000132, 
0x00040008, 0x00000001, 0x0000009D, 0x00000000, 0x0003003E, 0x00000134, 0x00000135, 0x00040008, 0x00000001, 0x0000009F, 0x00000000, 0x0003003E, 
0x00000136, 0x00000137, 0x00040008, 0x00000001, 0x000000A1, 0x00000000, 0x0004003D, 0x00000011, 0x00000139, 0x0000012A, 0x0004003D, 0x00000007, 
0x0000013A, 0x00000136, 0x0004003D, 0x00000007, 0x0000013C, 0x00000134, 0x0003003E, 0x0000013B, 0x0000013C, 0x00070039, 0x00000007, 0x0000013D, 
0x00000027, 0x00000139, 0x0000013B, 0x0000013A, 0x0003003E, 0x00000138, 0x0000013D, 0x00040008, 0x00000001, 0x000000A3, 0x00000000, 0x0004003D, 
0x00000007, 0x0000013E, 0x00000138, 0x000500AA, 0x0000001D, 0x00000140, 0x0000013E, 0x0000013F, 0x000600A9, 0x00000007, 0x00000141, 0x00000140, 
0x0000004B, 0x00000040, 0x0004003D, 0x00000007, 0x00000142, 0x00000129, 0x00050080, 0x00000007, 0x00000143, 0x00000142, 0x00000141, 0x0003003E, 
0x00000129, 0x00000143, 0x00040008, 0x00000001, 0x000000A4, 0x00000000, 0x0004003D, 0x00000011, 0x00000144, 0x0000012A, 0x0004003D, 0x00000007, 
0x00000145, 0x00000134, 0x00050080, 0x00000007, 0x00000146, 0x00000145, 0x00000092, 0x00060039, 0x0000001D, 0x00000147, 0x00000021, 0x00000144, 
0x00000146, 0x000400A8, 0x0000001D, 0x00000148, 0x00000147, 0x000600A9, 0x00000007, 0x00000149, 0x00000148, 0x0000004B, 0x00000040, 0x0004003D, 
0x00000007, 0x0000014A, 0x00000129, 0x00050080, 0x00000007, 0x0000014B, 0x0000014A, 0x00000149, 0x0003003E, 0x00000129, 0x0000014B, 0x00040008, 
0x00000001, 0x000000A5, 0x00000000, 0x0004003D, 0x00000011, 0x0000014C, 0x0000012A, 0x0004003D, 0x00000007, 0x0000014D, 0x00000134, 0x00050080, 
0x00000007, 0x0000014E, 0x0000014D, 0x0000000F, 0x00060039, 0x0000001D, 0x0000014F, 0x00000021, 0x0000014C, 0x0000014E, 0x000600A9, 0x00000007, 
0x00000150, 0x0000014F, 0x0000004B, 0x00000040, 0x0004003D, 0x00000007, 0x00000151, 0x00000129, 0x00050080, 0x00000007, 0x00000152, 0x00000151, 
0x00000150, 0x0003003E, 0x00000129, 0x00000152, 0x00040008, 0x00000001, 0x000000A6, 0x00000000, 0x0004003D, 0x00000011, 0x00000153, 0x0000012A, 
0x0004003D, 0x00000007, 0x00000154, 0x00000134, 0x0004003D, 0x00000007, 0x00000155, 0x00000136, 0x00050080, 0x00000007, 0x00000156, 0x00000154, 
0x00000155, 0x00060039, 0x0000001D, 0x00000157, 0x00000021, 0x00000153, 0x00000156, 0x000600A9, 0x00000007, 0x00000158, 0x00000157, 0x0000004B, 
0x00000040, 0x0004003D, 0x00000007, 0x00000159, 0x00000129, 0x00050080, 0x00000007, 0x0000015A, 0x00000159, 0x00000158, 0x0003003E, 0x00000129, 
0x0000015A, 0x00040008, 0x00000001, 0x000000A7, 0x00000000, 0x0004003D, 0x00000007, 0x0000015B, 0x00000129, 0x000200FE, 0x0000015B, 0x00010038, 
0x00050036, 0x00000007, 0x0000003A, 0x00000000, 0x00000035, 0x000200F8, 0x0000003B, 0x0004003B, 0x00000017, 0x0000015E, 0x00000007, 0x0004003B, 
0x00000012, 0x0000015F, 0x00000007, 0x0004003B, 0x00000012, 0x00000160, 0x00000007, 0x0004003B, 0x00000017, 0x00000169, 0x00000007, 0x0004003B, 
0x00000017, 0x0000016B, 0x00000007, 0x0004003B, 0x00000017, 0x0000016D, 0x00000007, 0x0004003B, 0x00000017, 0x00000170, 0x00000007, 0x0004003B, 
0x00000017, 0x00000194, 0x00000007, 0x00040008, 0x00000001, 0x000000AD, 0x00000000, 0x0003003E, 0x0000015E, 0x00000040, 0x00040008, 0x00000001, 
0x000000B0, 0x00000000, 0x00050039, 0x00000003, 0x00000161, 0x00000015, 0x00000160, 0x0004003D, 0x00000011, 0x00000162, 0x00000160, 0x0003003E, 
0x0000015F, 0x00000162, 0x00040008, 0x00000001, 0x000000B1, 0x00000000, 0x00060041, 0x00000017, 0x00000163, 0x0000015F, 0x00000061, 0x00000061, 
0x0003003E, 0x00000163, 0x0000004F, 0x00040008, 0x00000001, 0x000000B2, 0x00000000, 0x00060041, 0x00000017, 0x00000165, 0x0000015F, 0x00000061, 
0x00000065, 0x0003003E, 0x00000165, 0x00000164, 0x00040008, 0x00000001, 0x000000B3, 0x00000000, 0x0004003D, 0x00000011, 0x00000166, 0x0000015F, 
0x00060039, 0x00000007, 0x00000167, 0x00000033, 0x00000166, 0x0000004B, 0x00050041, 0x00000017, 0x00000168, 0x0000015F, 0x00000065, 0x0003003E, 
0x00000168, 0x00000167, 0x00040008, 0x00000001, 0x000000B4, 0x00000000, 0x0003003E, 0x00000169, 0x0000016A, 0x00040008, 0x00000001, 0x000000B6, 
0x00000000, 0x0003003E, 0x0000016B, 0x0000016C, 0x00040008, 0x00000001, 0x000000B8, 0x00000000, 0x0004003D, 0x00000011, 0x0000016E, 0x0000015F, 
0x0004003D, 0x00000007, 0x0000016F, 0x0000016B, 0x0004003D, 0x00000007, 0x00000171, 0x00000169, 0x0003003E, 0x00000170, 0x00000171, 0x00070039, 
0x00000007, 0x00000172, 0x00000027, 0x0000016E, 0x00000170, 0x0000016F, 0x0003003E, 0x0000016D, 0x00000172, 0x00040008, 0x00000001, 0x000000BA, 
0x00000000, 0x0004003D, 0x00000007, 0x00000173, 0x0000016D, 0x000500AA, 0x0000001D, 0x00000175, 0x00000173, 0x00000174, 0x000600A9, 0x00000007, 
0x00000176, 0x00000175, 0x0000004B, 0x00000040, 0x0004003D, 0x00000007, 0x00000177, 0x0000015E, 0x00050080, 0x00000007, 0x00000178, 0x00000177, 
0x00000176, 0x0003003E, 0x0000015E, 0x00000178, 0x00040008, 0x00000001, 0x000000BB, 0x00000000, 0x0004003D, 0x00000011, 0x00000179, 0x0000015F, 
0x0004003D, 0x00000007, 0x0000017A, 0x00000169, 0x00050080, 0x00000007, 0x0000017C, 0x0000017A, 0x0000017B, 0x00060039, 0x0000001D, 0x0000017D, 
0x00000021, 0x00000179, 0x0000017C, 0x000400A8, 0x0000001D, 0x0000017E, 0x0000017D, 0x000600A9, 0x00000007, 0x0000017F, 0x0000017E, 0x0000004B, 
0x00000040, 0x0004003D, 0x00000007, 0x00000180, 0x0000015E, 0x00050080, 0x00000007, 0x00000181, 0x00000180, 0x0000017F, 0x0003003E, 0x0000015E, 
0x00000181, 0x00040008, 0x00000001, 0x000000BC, 0x00000000, 0x0004003D, 0x00000011, 0x00000182, 0x0000015F, 0x0004003D, 0x00000007, 0x00000183, 
0x00000169, 0x00050080, 0x00000007, 0x00000185, 0x00000183, 0x00000184, 0x00060039, 0x0000001D, 0x00000186, 0x00000021, 0x00000182, 0x00000185, 
0x000600A9, 0x00000007, 0x00000187, 0x00000186, 0x0000004B, 0x00000040, 0x0004003D, 0x00000007, 0x00000188, 0x0000015E, 0x00050080, 0x00000007, 
0x00000189, 0x00000188, 0x00000187, 0x0003003E, 0x0000015E, 0x00000189, 0x00040008, 0x00000001, 0x000000BD, 0x00000000, 0x0004003D, 0x00000011, 
0x0000018A, 0x0000015F, 0x0004003D, 0x00000007, 0x0000018B, 0x00000169, 0x0004003D, 0x00000007, 0x0000018C, 0x0000016B, 0x00050080, 0x00000007, 
0x0000018D, 0x0000018B, 0x0000018C, 0x00060039, 0x0000001D, 0x0000018E, 0x00000021, 0x0000018A, 0x0000018D, 0x000600A9, 0x00000007, 0x0000018F, 
0x0000018E, 0x0000004B, 0x00000040, 0x0004003D, 0x00000007, 0x00000190, 0x0000015E, 0x00050080, 0x00000007, 0x00000191, 0x00000190, 0x0000018F, 
0x0003003E, 0x0000015E, 0x00000191, 0x00040008, 0x00000001, 0x000000BE, 0x00000000, 0x0003003E, 0x00000169, 0x00000040, 0x00040008, 0x00000001, 
0x000000BF, 0x00000000, 0x0003003E, 0x0000016B, 0x0000000F, 0x00040008, 0x00000001, 0x000000C0, 0x00000000, 0x0004003D, 0x00000011, 0x00000192, 
0x0000015F, 0x0004003D, 0x00000007, 0x00000193, 0x0000016B, 0x0004003D, 0x00000007, 0x00000195, 0x00000169, 0x0003003E, 0x00000194, 0x00000195, 
0x00070039, 0x00000007, 0x00000196, 0x00000027, 0x00000192, 0x00000194, 0x00000193, 0x0003003E, 0x0000016D, 0x00000196, 0x00040008, 0x00000001, 
0x000000C1, 0x00000000, 0x0004003D, 0x00000007, 0x00000197, 0x0000016D, 0x000500AA, 0x0000001D, 0x00000198, 0x00000197, 0x0000013F, 0x000600A9, 
0x00000007, 0x00000199, 0x00000198, 0x0000004B, 0x00000040, 0x0004003D, 0x00000007, 0x0000019A, 0x0000015E, 0x00050080, 0x00000007, 0x0000019B, 
0x0000019A, 0x00000199, 0x0003003E, 0x0000015E, 0x0000019B, 0x00040008, 0x00000001, 0x000000C2, 0x00000000, 0x0004003D, 0x00000007, 0x0000019C, 
0x0000015E, 0x000200FE, 0x0000019C, 0x00010038, 0x00050036, 0x00000007, 0x0000003C, 0x00000000, 0x00000035, 0x000200F8, 0x0000003D, 0x0004003B, 
0x00000017, 0x0000019F, 0x00000007, 0x0004003B, 0x00000012, 0x000001A0, 0x00000007, 0x0004003B, 0x00000012, 0x000001A1, 0x00000007, 0x0004003B, 
0x00000012, 0x000001AA, 0x00000007, 0x0004003B, 0x00000017, 0x000001AC, 0x00000007, 0x0004003B, 0x00000012, 0x000001B5, 0x00000007, 0x0004003B, 
0x00000017, 0x000001B7, 0x00000007, 0x0004003B, 0x00000012, 0x000001C0, 0x00000007, 0x0004003B, 0x00000017, 0x000001C2, 0x00000007, 0x00040008, 
0x00000001, 0x000000C8, 0x00000000, 0x0003003E, 0x0000019F, 0x00000040, 0x00040008, 0x00000001, 0x000000CB, 0x00000000, 0x00050039, 0x00000003, 
0x000001A2, 0x00000015, 0x000001A1, 0x0004003D, 0x00000011, 0x000001A3, 0x000001A1, 0x0003003E, 0x000001A0, 0x000001A3, 0x00040008, 0x00000001, 
0x000000CC, 0x00000000, 0x00050041, 0x00000017, 0x000001A4, 0x000001A0, 0x00000065, 0x0004003D, 0x00000007, 0x000001A5, 0x000001A4, 0x000500AA, 
0x0000001D, 0x000001A6, 0x000001A5, 0x00000040, 0x000600A9, 0x00000007, 0x000001A7, 0x000001A6, 0x0000004B, 0x00000040, 0x0004003D, 0x00000007, 
0x000001A8, 0x0000019F, 0x00050080, 0x00000007, 0x000001A9, 0x000001A8, 0x000001A7, 0x0003003E, 0x0000019F, 0x000001A9, 0x00040008, 0x00000001, 
0x000000CD, 0x00000000, 0x0004003D, 0x00000011, 0x000001AB, 0x000001A0, 0x0003003E, 0x000001AA, 0x000001AB, 0x0003003E, 0x000001AC, 0x00000040, 
0x00060039, 0x00000003, 0x000001AD, 0x0000001B, 0x000001AA, 0x000001AC, 0x0004003D, 0x00000011, 0x000001AE, 0x000001AA, 0x0003003E, 0x000001A0, 
0x000001AE, 0x00040008, 0x00000001, 0x000000CE, 0x00000000, 0x00050041, 0x00000017, 0x000001AF, 0x000001A0, 0x00000065, 0x0004003D, 0x00000007, 
0x000001B0, 0x000001AF, 0x000500AA, 0x0000001D, 0x000001B1, 0x000001B0, 0x00000040, 0x000600A9, 0x00000007, 0x000001B2, 0x000001B1, 0x0000004B, 
0x00000040, 0x0004003D, 0x00000007, 0x000001B3, 0x0000019F, 0x00050080, 0x00000007, 0x000001B4, 0x000001B3, 0x000001B2, 0x0003003E, 0x0000019F, 
0x000001B4, 0x00040008, 0x00000001, 0x000000CF, 0x00000000, 0x0004003D, 0x00000011, 0x000001B6, 0x000001A0, 0x0003003E, 0x000001B5, 0x000001B6, 
0x0003003E, 0x000001B7, 0x0000004B, 0x00060039, 0x00000003, 0x000001B8, 0x0000001B, 0x000001B5, 0x000001B7, 0x0004003D, 0x00000011, 0x000001B9, 
0x000001B5, 0x0003003E, 0x000001A0, 0x000001B9, 0x00040008, 0x00000001, 0x000000D0, 0x00000000, 0x00050041, 0x00000017, 0x000001BA, 0x000001A0, 
0x00000065, 0x0004003D, 0x00000007, 0x000001BB, 0x000001BA, 0x000500AA, 0x0000001D, 0x000001BC, 0x000001BB, 0x0000004B, 0x000600A9, 0x00000007, 
0x000001BD, 0x000001BC, 0x0000004B, 0x00000040, 0x0004003D, 0x00000007, 0x000001BE, 0x0000019F, 0x00050080, 0x00000007, 0x000001BF, 0x000001BE, 
0x000001BD, 0x0003003E, 0x0000019F, 0x000001BF, 0x00040008, 0x00000001, 0x000000D1, 0x00000000, 0x0004003D, 0x00000011, 0x000001C1, 0x000001A0, 
0x0003003E, 0x000001C0, 0x000001C1, 0x0003003E, 0x000001C2, 0x0000004F, 0x00060039, 0x00000003, 0x000001C3, 0x0000001B, 0x000001C0, 0x000001C2, 
0x0004003D, 0x00000011, 0x000001C4, 0x000001C0, 0x0003003E, 0x000001A0, 0x000001C4, 0x00040008, 0x00000001, 0x000000D2, 0x00000000, 0x00050041, 
0x00000017, 0x000001C5, 0x000001A0, 0x00000065, 0x0004003D, 0x00000007, 0x000001C6, 0x000001C5, 0x000500AA, 0x0000001D, 0x000001C8, 0x000001C6, 
0x000001C7, 0x000600A9, 0x00000007, 0x000001C9, 0x000001C8, 0x0000004B, 0x00000040, 0x0004003D, 0x00000007, 0x000001CA, 0x0000019F, 0x00050080, 
0x00000007, 0x000001CB, 0x000001CA, 0x000001C9, 0x0003003E, 0x0000019F, 0x000001CB, 0x00040008, 0x00000001, 0x000000D3, 0x00000000, 0x0004003D, 
0x00000007, 0x000001CC, 0x0000019F, 0x000200FE, 0x000001CC, 0x00010038, 0x00050036, 0x00000007, 0x0000003E, 0x00000000, 0x00000035, 0x000200F8, 
0x0000003F, 0x0004003B, 0x00000017, 0x000001CF, 0x00000007, 0x0004003B, 0x00000017, 0x000001D0, 0x00000007, 0x0004003B, 0x00000017, 0x000001D1, 
0x00000007, 0x0004003B, 0x00000017, 0x000001D2, 0x00000007, 0x0004003B, 0x00000012, 0x000001D4, 0x00000007, 0x0004003B, 0x00000012, 0x000001D5, 
0x00000007, 0x0004003B, 0x00000012, 0x000001D9, 0x00000007, 0x0004003B, 0x00000017, 0x000001DB, 0x00000007, 0x0004003B, 0x00000017, 0x000001DD, 
0x00000007, 0x0004003B, 0x00000017, 0x000001E1, 0x00000007, 0x0004003B, 0x00000017, 0x000001E4, 0x00000007, 0x00040008, 0x00000001, 0x000000D9, 
0x00000000, 0x0003003E, 0x000001CF, 0x00000040, 0x00040008, 0x00000001, 0x000000DB, 0x00000000, 0x0003003E, 0x000001D0, 0x0000016A, 0x00040008, 
0x00000001, 0x000000DD, 0x00000000, 0x0003003E, 0x000001D1, 0x0000016C, 0x00040008, 0x00000001, 0x000000DF, 0x00000000, 0x0003003E, 0x000001D2, 
0x000001D3, 0x00040008, 0x00000001, 0x000000E2, 0x00000000, 0x00050039, 0x00000003, 0x000001D6, 0x00000015, 0x000001D5, 0x0004003D, 0x00000011, 
0x000001D7, 0x000001D5, 0x0003003E, 0x000001D4, 0x000001D7, 0x00040008, 0x00000001, 0x000000E3, 0x00000000, 0x0004003D, 0x00000007, 0x000001D8, 
0x000001D1, 0x0004003D, 0x00000011, 0x000001DA, 0x000001D4, 0x0003003E, 0x000001D9, 0x000001DA, 0x0004003D, 0x00000007, 0x000001DC, 0x000001D2, 
0x0003003E, 0x000001DB, 0x000001DC, 0x0004003D, 0x00000007, 0x000001DE, 0x000001D0, 0x0003003E, 0x000001DD, 0x000001DE, 0x00080039, 0x00000003, 
0x000001DF, 0x0000002E, 0x000001D9, 0x000001DB, 0x000001DD, 0x000001D8, 0x0004003D, 0x00000011, 0x000001E0, 0x000001D9, 0x0003003E, 0x000001D4, 
0x000001E0, 0x00040008, 0x00000001, 0x000000E4, 0x00000000, 0x0004003D, 0x00000011, 0x000001E2, 0x000001D4, 0x0004003D, 0x00000007, 0x000001E3, 
0x000001D1, 0x0004003D, 0x00000007, 0x000001E5, 0x000001D0, 0x0003003E, 0x000001E4, 0x000001E5, 0x00070039, 0x00000007, 0x000001E6, 0x00000027, 
0x000001E2, 0x000001E4, 0x000001E3, 0x0003003E, 0x000001E1, 0x000001E6, 0x00040008, 0x00000001, 0x000000E6, 0x00000000, 0x00050041, 0x00000017, 
0x000001E7, 0x000001D4, 0x00000065, 0x0004003D, 0x00000007, 0x000001E8, 0x000001E7, 0x0004003D, 0x00000007, 0x000001E9, 0x000001D0, 0x0004003D, 
0x00000007, 0x000001EA, 0x000001D1, 0x00050080, 0x00000007, 0x000001EB, 0x000001E9, 0x000001EA, 0x000500AA, 0x0000001D, 0x000001EC, 0x000001E8, 
0x000001EB, 0x000600A9, 0x00000007, 0x000001ED, 0x000001EC, 0x0000004B, 0x00000040, 0x0004003D, 0x00000007, 0x000001EE, 0x000001CF, 0x00050080, 
0x00000007, 0x000001EF, 0x000001EE, 0x000001ED, 0x0003003E, 0x000001CF, 0x000001EF, 0x00040008, 0x00000001, 0x000000E7, 0x00000000, 0x0004003D, 
0x00000007, 0x000001F0, 0x000001E1, 0x0004003D, 0x00000007, 0x000001F1, 0x000001D2, 0x000500AA, 0x0000001D, 0x000001F2, 0x000001F0, 0x000001F1, 
0x000600A9, 0x00000007, 0x000001F3, 0x000001F2, 0x0000004B, 0x00000040, 0x0004003D, 0x00000007, 0x000001F4, 0x000001CF, 0x00050080, 0x00000007, 
0x000001F5, 0x000001F4, 0x000001F3, 0x0003003E, 0x000001CF, 0x000001F5, 0x00040008, 0x00000001, 0x000000E8, 0x00000000, 0x0004003D, 0x00000007, 
0x000001F6, 0x000001CF, 0x000200FE, 0x000001F6, 0x00010038 });
	descr.Compute().StringCL( 
R"#(#define FORMAT( _fmt_ )
#define INOUT
#define OUT
// Functions for GLSL compatibility

#define Gen_IntTemplates( _gen_ ) \
	_gen_( int ) \
	_gen_( int2 ) \
	_gen_( int3 ) \
	_gen_( int4 )

#define Gen_UIntTemplates( _gen_ ) \
	_gen_( uint ) \
	_gen_( uint2 ) \
	_gen_( uint3 ) \
	_gen_( uint4 )
	
#define Gen_LongTemplates( _gen_ ) \
	_gen_( long ) \
	_gen_( long2 ) \
	_gen_( long3 ) \
	_gen_( long4 )
	
#define Gen_ULongTemplates( _gen_ ) \
	_gen_( ulong ) \
	_gen_( ulong2 ) \
	_gen_( ulong3 ) \
	_gen_( ulong4 )

#define Gen_FloatTemplates( _gen_ ) \
	_gen_( float ) \
	_gen_( float2 ) \
	_gen_( float3 ) \
	_gen_( float4 )

#define Gen_DoubleTemplates( _gen_ ) \
	_gen_( double ) \
	_gen_( double2 ) \
	_gen_( double3 ) \
	_gen_( double4 )


// Fract
#define GenTemplate_Fract( _type_ ) \
	_type_ fractTempl_##_type_ (_type_ x) { \
		_type_	ipart; \
		return fract( x, &ipart ); \
	}
	Gen_FloatTemplates( GenTemplate_Fract )
	Gen_DoubleTemplates( GenTemplate_Fract )
#undef GenTemplate_Fract


// findMSB 32
#define GenTemplate_FindMSB32( _type_ ) \
	_type_ findMSB_##_type_ (_type_ x) { \
		return 31 - clz( x ); \
	}
	Gen_IntTemplates( GenTemplate_FindMSB32 )
	Gen_UIntTemplates( GenTemplate_FindMSB32 )
#undef GenTemplate_FindMSB32
	

// findMSB 64
#define GenTemplate_FindMSB64( _type_ ) \
	_type_ findMSB_##_type_ (_type_ x) { \
		return 63 - clz( x ); \
	}
	Gen_LongTemplates( GenTemplate_FindMSB64 )
	Gen_ULongTemplates( GenTemplate_FindMSB64 )
#undef GenTemplate_FindMSB64


// findLSB 32
#define GenTemplate_FindLSB32( _type_ ) \
	_type_ findLSB_##_type_ (_type_ x) { \
		return	(convert_##_type_(!!( x >> 31 )) & convert_##_type_(!( x & (_type_)(0x7FFFFFFF) ))) + \
				(convert_##_type_(!!( x >> 30 )) & convert_##_type_(!( x & (_type_)(0x3FFFFFFF) ))) + \
				(convert_##_type_(!!( x >> 29 )) & convert_##_type_(!( x & (_type_)(0x1FFFFFFF) ))) + \
				(convert_##_type_(!!( x >> 28 )) & convert_##_type_(!( x & (_type_)(0xFFFFFFF) ))) + \
				(convert_##_type_(!!( x >> 27 )) & convert_##_type_(!( x & (_type_)(0x7FFFFFF) ))) + \
				(convert_##_type_(!!( x >> 26 )) & convert_##_type_(!( x & (_type_)(0x3FFFFFF) ))) + \
				(convert_##_type_(!!( x >> 25 )) & convert_##_type_(!( x & (_type_)(0x1FFFFFF) ))) + \
				(convert_##_type_(!!( x >> 24 )) & convert_##_type_(!( x & (_type_)(0xFFFFFF) ))) + \
				(convert_##_type_(!!( x >> 23 )) & convert_##_type_(!( x & (_type_)(0x7FFFFF) ))) + \
				(convert_##_type_(!!( x >> 22 )) & convert_##_type_(!( x & (_type_)(0x3FFFFF) ))) + \
				(convert_##_type_(!!( x >> 21 )) & convert_##_type_(!( x & (_type_)(0x1FFFFF) ))) + \
				(convert_##_type_(!!( x >> 20 )) & convert_##_type_(!( x & (_type_)(0xFFFFF) ))) + \
				(convert_##_type_(!!( x >> 19 )) & convert_##_type_(!( x & (_type_)(0x7FFFF) ))) + \
				(convert_##_type_(!!( x >> 18 )) & convert_##_type_(!( x & (_type_)(0x3FFFF) ))) + \
				(convert_##_type_(!!( x >> 17 )) & convert_##_type_(!( x & (_type_)(0x1FFFF) ))) + \
				(convert_##_type_(!!( x >> 16 )) & convert_##_type_(!( x & (_type_)(0xFFFF) ))) + \
				(convert_##_type_(!!( x >> 15 )) & convert_##_type_(!( x & (_type_)(0x7FFF) ))) + \
				(convert_##_type_(!!( x >> 14 )) & convert_##_type_(!( x & (_type_)(0x3FFF) ))) + \
				(convert_##_type_(!!( x >> 13 )) & convert_##_type_(!( x & (_type_)(0x1FFF) ))) + \
				(convert_##_type_(!!( x >> 12 )) & convert_##_type_(!( x & (_type_)(0xFFF) ))) + \
				(convert_##_type_(!!( x >> 11 )) & convert_##_type_(!( x & (_type_)(0x7FF) ))) + \
				(convert_##_type_(!!( x >> 10 )) & convert_##_type_(!( x & (_type_)(0x3FF) ))) + \
				(convert_##_type_(!!( x >>  9 )) & convert_##_type_(!( x & (_type_)(0x1FF) ))) + \
				(convert_##_type_(!!( x >>  8 )) & convert_##_type_(!( x & (_type_)(0xFF) ))) + \
				(convert_##_type_(!!( x >>  7 )) & convert_##_type_(!( x & (_type_)(0x7F) ))) + \
				(convert_##_type_(!!( x >>  6 )) & convert_##_type_(!( x & (_type_)(0x3F) ))) + \
				(convert_##_type_(!!( x >>  5 )) & convert_##_type_(!( x & (_type_)(0x1F) ))) + \
				(convert_##_type_(!!( x >>  4 )) & convert_##_type_(!( x & (_type_)(0xF) ))) + \
				(convert_##_type_(!!( x >>  3 )) & convert_##_type_(!( x & (_type_)(0x7) ))) + \
				(convert_##_type_(!!( x >>  2 )) & convert_##_type_(!( x & (_type_)(0x3) ))) + \
				(convert_##_type_(!!( x >>  1 )) & convert_##_type_(!( x & (_type_)(0x1) ))) + \
				convert_##_type_(!!( x )) - 1; \
	}
	Gen_IntTemplates( GenTemplate_FindLSB32 )
	Gen_UIntTemplates( GenTemplate_FindLSB32 )
#undef GenTemplate_FindLSB32
	
/*
// findLSB 64
#define GenTemplate_FindLSB64( _type_ ) \
	_type_ findLSB_##_type_ (_type_ x) { \
		return 63 - clz( rotate( x, 63 ) ); \
	}
	Gen_LongTemplates( GenTemplate_FindLSB64 )
	Gen_ULongTemplates( GenTemplate_FindLSB64 )
#undef GenTemplate_FindLSB64



// bitfieldReverse 32
#define GenTemplate_BitfieldReverse32( _type_ ) \
	_type_ bitfieldReverse_##_type_ (_type_ x) { \
		return ; \
	}
	Gen_IntTemplates( GenTemplate_BitfieldReverse32 )
	Gen_UIntTemplates( GenTemplate_BitfieldReverse32 )
#undef GenTemplate_BitfieldReverse32
*/

#undef Gen_IntTemplates
#undef Gen_UIntTemplates
#undef Gen_LongTemplates
#undef Gen_ULongTemplates
#undef Gen_FloatTemplates
#undef Gen_DoubleTemplates

struct BigInt
{
	uint value [4];
	uint lastBit;
};

struct BigIntTest_SSBO
{
	uint result;
	float _padding0;
	float _padding1;
	float _padding2;
};


//---------------------------------

uint TestWrite ();
uint TestLastBit ();
uint BigInt_Read (const struct BigInt *bi3, uint pos1, const uint count);
void BigInt_Write (INOUT struct BigInt *bi4, uint value, uint pos2, const uint count1);
uint _BigInt_CalcBits (const struct BigInt *bi5, const uint i);
uint TestAdd ();
uint TestRead ();
uint TestRead2 ();
void BigInt_Create (OUT struct BigInt *bi);
uint ToMask (const uint x);
uint BitScanReverse (const uint x1);
void BigInt_Add (INOUT struct BigInt *bi1, uint right);
int BigInt_IsZero (const struct BigInt *bi2, const uint pos);

//---------------------------------

uint ToMask (const uint x)
{
	return ( ((x < ((uint)( 0u )))) ? (((uint)( 0u ))) : (( ((x < ((uint)( 32u )))) ? (((((uint)( 1u )) << x) - ((uint)( 1u )))) : (((uint)( 4294967295u ))) )) );
}


uint BitScanReverse (const uint x1)
{
	return convert_uint( findMSB_uint( x1 ) );
}


void BigInt_Create (OUT struct BigInt *bi)
{
	for (uint c = ((uint)( 0u )); (c < ((uint)( 4u ))); ++( c ))
	{
		(bi->value[c]) = ((uint)( 0u ));
	}
	;
	bi->lastBit = ((uint)( 0u ));
}


void BigInt_Add (INOUT struct BigInt *bi1, uint right)
{
	for (uint h = ((uint)( 0u )); (h < ((uint)( 4u ))); ++( h ))
	{
		const uint prev = (bi1->value[h]);
		;
		((bi1->value[h]) += right);
		if (((bi1->value[h]) >= prev))
		{
			bi1->lastBit = max( bi1->lastBit, _BigInt_CalcBits(bi1, h) );
			break;
		;
		}
		;
		right = ((uint)( 1u ));
	}
	;
}


int BigInt_IsZero (const struct BigInt *bi2, const uint pos)
{
	return (pos >= bi2->lastBit);
}


uint BigInt_Read (const struct BigInt *bi3, uint pos1, const uint count)
{
	const uint k = clamp( (pos1 / ((uint)( 32u ))), ((uint)( 0u )), ((uint)( 3u )) );
	;
	(pos1 -= (((uint)( 32u )) * k));
	uint result = (((bi3->value[k]) >> pos1) & ToMask(count));
	;
	uint max_count = (((uint)( 32u )) - pos1);
	;
	if (((count > max_count) && ((k + ((uint)( 1u ))) < ((uint)( 4u )))))
	{
		(result |= (((bi3->value[(k + ((uint)( 1u )))]) & ToMask((count - max_count))) << max_count));
	;
	}
	;
	return result;
}


void BigInt_Write (INOUT struct BigInt *bi4, uint value, uint pos2, const uint count1)
{
	uint m = clamp( (pos2 / ((uint)( 32u ))), ((uint)( 0u )), ((uint)( 3u )) );
	;
	(pos2 -= (((uint)( 32u )) * m));
	(value &= ToMask(count1));
	uint max_count1 = (((uint)( 32u )) - pos2);
	;
	((bi4->value[m]) |= (value << pos2));
	if (((count1 > max_count1) && ((m + ((uint)( 1u ))) < ((uint)( 4u )))))
	{
		((bi4->value[++( m )]) |= (value >> max_count1));
	;
	}
	;
	bi4->lastBit = _BigInt_CalcBits(bi4, m);
}


uint _BigInt_CalcBits (const struct BigInt *bi5, const uint i)
{
	return ((BitScanReverse((bi5->value[i])) + ((uint)( 1u ))) + (i * ((uint)( 32u ))));
}


uint TestAdd ()
{
	uint res = ((uint)( 0u ));
	;
	struct BigInt bi6;
	BigInt_Create(&bi6);
	BigInt_Add(&bi6, ((uint)( 4294967290u )));
	BigInt_Add(&bi6, ((uint)( 4294967292u )));
	(res += convert_uint( ((bi6.value[((int)( 0 ))]) == ((uint)( 4294967286u ))) ));
	(res += convert_uint( ((bi6.value[((int)( 1 ))]) == ((uint)( 1u ))) ));
	BigInt_Add(&bi6, ((uint)( 4294967293u )));
	(res += convert_uint( ((bi6.value[((int)( 0 ))]) == ((uint)( 4294967283u ))) ));
	(res += convert_uint( ((bi6.value[((int)( 1 ))]) == ((uint)( 2u ))) ));
	return res;
}


uint TestRead ()
{
	uint res1 = ((uint)( 0u ));
	;
	struct BigInt bi7;
	BigInt_Create(&bi7);
	(bi7.value[((int)( 0 ))]) = ((uint)( 4294967295u ));
	(bi7.value[((int)( 1 ))]) = ((uint)( 65535u ));
	bi7.lastBit = _BigInt_CalcBits(&bi7, ((uint)( 1u )));
	uint pos3 = ((uint)( 44u ));
	;
	uint count2 = ((uint)( 8u ));
	;
	uint readn = BigInt_Read(&bi7, pos3, count2);
	;
	(res1 += convert_uint( (readn == ((uint)( 15u ))) ));
	(res1 += convert_uint( !( BigInt_IsZero(&bi7, (pos3 + ((uint)( 3u )))) ) ));
	(res1 += convert_uint( BigInt_IsZero(&bi7, (pos3 + ((uint)( 4u )))) ));
	(res1 += convert_uint( BigInt_IsZero(&bi7, (pos3 + count2)) ));
	return res1;
}


uint TestRead2 ()
{
	uint res2 = ((uint)( 0u ));
	;
	struct BigInt bi8;
	BigInt_Create(&bi8);
	(bi8.value[((int)( 0 ))]) = ((uint)( 4294967295u ));
	(bi8.value[((int)( 1 ))]) = ((uint)( 291u ));
	bi8.lastBit = _BigInt_CalcBits(&bi8, ((uint)( 1u )));
	uint pos4 = ((uint)( 28u ));
	;
	uint count3 = ((uint)( 16u ));
	;
	uint readn1 = BigInt_Read(&bi8, pos4, count3);
	;
	(res2 += convert_uint( (readn1 == ((uint)( 4671u ))) ));
	(res2 += convert_uint( !( BigInt_IsZero(&bi8, (pos4 + ((uint)( 12u )))) ) ));
	(res2 += convert_uint( BigInt_IsZero(&bi8, (pos4 + ((uint)( 13u )))) ));
	(res2 += convert_uint( BigInt_IsZero(&bi8, (pos4 + count3)) ));
	pos4 = ((uint)( 0u ));
	count3 = ((uint)( 4u ));
	readn1 = BigInt_Read(&bi8, pos4, count3);
	(res2 += convert_uint( (readn1 == ((uint)( 15u ))) ));
	return res2;
}


uint TestLastBit ()
{
	uint res3 = ((uint)( 0u ));
	;
	struct BigInt bi9;
	BigInt_Create(&bi9);
	(res3 += convert_uint( (bi9.lastBit == ((uint)( 0u ))) ));
	BigInt_Add(&bi9, ((uint)( 0u )));
	(res3 += convert_uint( (bi9.lastBit == ((uint)( 0u ))) ));
	BigInt_Add(&bi9, ((uint)( 1u )));
	(res3 += convert_uint( (bi9.lastBit == ((uint)( 1u ))) ));
	BigInt_Add(&bi9, ((uint)( 4294967295u )));
	(res3 += convert_uint( (bi9.lastBit == ((uint)( 33u ))) ));
	return res3;
}


uint TestWrite ()
{
	uint res4 = ((uint)( 0u ));
	;
	uint pos5 = ((uint)( 28u ));
	;
	uint count4 = ((uint)( 16u ));
	;
	uint value1 = ((uint)( 62805u ));
	;
	struct BigInt bi10;
	BigInt_Create(&bi10);
	BigInt_Write(&bi10, value1, pos5, count4);
	uint readn2 = BigInt_Read(&bi10, pos5, count4);
	;
	(res4 += convert_uint( (bi10.lastBit == (pos5 + count4)) ));
	(res4 += convert_uint( (readn2 == value1) ));
	return res4;
}


kernel void Main (
	/*0*/__global  struct BigIntTest_SSBO* ssb)
{

	{
		uint res5 = ((uint)( 130u ));
		;
		(res5 -= TestAdd());
		(res5 -= TestRead());
		(res5 -= TestRead2());
		(res5 -= TestLastBit());
		(res5 -= TestWrite());
		ssb->result = res5;
	}
}

)#"_str );
#ifdef GRAPHICS_API_SOFT
	descr.Compute().FuncSW( &SWShaderLang::sw_biginttest_comp );
#endif

};
}	// Pipelines
