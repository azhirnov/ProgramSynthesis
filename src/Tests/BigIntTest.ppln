/*
	Tests for BigInt
*/

#ifdef ANGELSCRIPT
void main ()
{
	ComputePipeline	self = ComputePipeline();

	self.shaderFormat = EShaderSrcFormat_GXSL;
	
	self.compute.LoadSelf();
}
#endif
//-----------------------------------------------------------------------------


#ifdef SHADER
#if SHADER & SH_COMPUTE

#include <Common/Defines.glsl>
#include <Common/Cmp.glsl>
#include <Math/BitMath.glsl>
#include "../Generators/BigInt.glsl"

#define ASSERT( _condition_ )	res += uint(_condition_)


uint TestAdd ()
{
	BigInt	bi;
	uint	res = 0;

	BigInt_Create( bi );

	BigInt_Add( bi, ~0u - 5 );
	BigInt_Add( bi, ~0u - 3 );

	ASSERT( bi.value[0] == ~0u - 9 );
	ASSERT( bi.value[1] == 1 );

	BigInt_Add( bi, ~0u - 2 );

	ASSERT( bi.value[0] == ~0u - 12 );
	ASSERT( bi.value[1] == 2 );

	return res;
}


uint TestRead ()
{
	BigInt	bi;
	uint	res = 0;
	
	BigInt_Create( bi );

	bi.value[0] = ~0u;
	bi.value[1] = ~0u >> 16;
	bi.lastBit  = _BigInt_CalcBits( bi, 1 );

	uint	pos = BIGINT_VALUE_SIZE + 16 - 4;
	uint	count = 8;

	uint	readn = BigInt_Read( bi, pos, count );

	ASSERT( readn == (1u << 4)-1 );
	ASSERT( not BigInt_IsZero( bi, pos + 3 ) );
	ASSERT( BigInt_IsZero( bi, pos + 4 ) );
	ASSERT( BigInt_IsZero( bi, pos + count ) );

	return res;
}


uint TestRead2 ()
{
	BigInt	bi;
	uint	res = 0;
	
	BigInt_Create( bi );

	bi.value[0] = ~0u;
	bi.value[1] = 0x123;
	bi.lastBit  = _BigInt_CalcBits( bi, 1 );

	uint	pos = BIGINT_VALUE_SIZE - 4;
	uint	count = 16;

	uint	readn = BigInt_Read( bi, pos, count );

	ASSERT( readn == 0x123F );
	ASSERT( not BigInt_IsZero( bi, pos + 12 ) );
	ASSERT( BigInt_IsZero( bi, pos + 13 ) );
	ASSERT( BigInt_IsZero( bi, pos + count ) );

	pos = 0;
	count = 4;

	readn = BigInt_Read( bi, pos, count );

	ASSERT( readn == 0xF );

	return res;
}


uint TestLastBit ()
{
	BigInt	bi;
	uint	res = 0;

	BigInt_Create( bi );
	ASSERT( bi.lastBit == 0 );

	BigInt_Add( bi, 0 );
	ASSERT( bi.lastBit == 0 );

	BigInt_Add( bi, 1 );
	ASSERT( bi.lastBit == 1 );

	BigInt_Add( bi, ~0u );
	ASSERT( bi.lastBit == BIGINT_VALUE_SIZE+1 );

	return res;
}


uint TestWrite ()
{
	BigInt	bi;
	uint	res = 0;

	uint	pos = BIGINT_VALUE_SIZE - 4;
	uint	count = 16;
	uint	value = 0xF555;

	BigInt_Create( bi );
	BigInt_Write( bi, value, pos, count );
	
	uint	readn = BigInt_Read( bi, pos, count );

	ASSERT( bi.lastBit == pos + count );
	ASSERT( readn == value );

	return res;
}

layout(binding=0, std140) writeonly buffer BigIntTest_SSBO
{
	uint	result;

}	ssb;

void main ()
{
	uint	res = /*magic*/111 + /*tests:*/4+4+5+4+2;

	res -= TestAdd();
	res -= TestRead();
	res -= TestRead2();
	res -= TestLastBit();
	res -= TestWrite();

	ssb.result = res;
}

#endif
#endif	// SHADER
