/*
	Tests for BigInt
*/

#ifdef ANGELSCRIPT
void main ()
{
	ComputePipeline	self = ComputePipeline();

	self.shaderFormat = EShaderSrcFormat_GXSL;
	
	self.compute.LoadSelf();
}
#endif
//-----------------------------------------------------------------------------


#ifdef SHADER
#if SHADER & SH_COMPUTE

#include <Common/Defines.glsl>
#include <Common/Cmp.glsl>
#include <Math/BitMath.glsl>

#define BIGINT_SIZE 2
#include "../Generators/BigInt.glsl"

#define T				int
#define MAX_COMMANDS	4
#define MAX_INPUTS		2
#define MAX_TESTS		10
#define MAX_RESULTS		10000
#define MAX_NODES		(MAX_COMMANDS + MAX_INPUTS + /*reserve*/4)
#define MAX_CONSTANTS	1

struct TestCase
{
	T		inArgs [MAX_INPUTS];	// input
	T		result;					// output
};

struct Bruteforce_Result
{
	BigInt	funHash;
	BigInt	constHash;
	float	ticks;
	float	accuracy;
};

struct Bruteforce_Atomics
{
	uint	results;
	uint	bestResults;
};


layout(binding=0, std140) writeonly buffer Bruteforce_SSBO
{
	uint	result;

}	ssb;

layout(binding=1, std430) readonly buffer Bruteforce_InputsSSBO
{
	BigInt		initialHash;
	BigInt		constHash;
	float		maxAccuracy;
	int			numConstants;
	T			constants [MAX_CONSTANTS];
	TestCase	tests [MAX_TESTS];

} ssb_input;

layout(binding=2, std430) readonly buffer Bruteforce_OutputsSSBO
{
	Bruteforce_Atomics	stat;
	Bruteforce_Result	funcs [MAX_RESULTS];

} ssb_output;


#define ASSERT( _condition_ )	res -= uint(_condition_)

void main ()
{
	uint	res = /*magic*/111 + /*tests:*/13 + 17;
	
	ASSERT( ssb_input.initialHash.value[0] == 0x11223344 );
	ASSERT( ssb_input.initialHash.value[1] == 0x55667788 );
	ASSERT( ssb_input.initialHash.lastBit  == 64 );

	ASSERT( Equals( ssb_input.maxAccuracy, 1.0f ) );

	ASSERT( ssb_input.tests[0].inArgs[0] == 1 );
	ASSERT( ssb_input.tests[0].inArgs[1] == 2 );
	ASSERT( ssb_input.tests[0].result    == 3 );
	
	ASSERT( ssb_input.tests[1].inArgs[0] == 10 );
	ASSERT( ssb_input.tests[1].inArgs[1] == 20 );
	ASSERT( ssb_input.tests[1].result    == 30 );
	
	ASSERT( ssb_input.tests[2].inArgs[0] == 11 );
	ASSERT( ssb_input.tests[2].inArgs[1] == 21 );
	ASSERT( ssb_input.tests[2].result    == 31 );
	
	ASSERT( ssb_output.stat.results == 1234 );
	ASSERT( ssb_output.stat.bestResults == 543 );
	
	ASSERT( ssb_output.funcs[0].funHash.value[0] == 0x12121212 );
	ASSERT( ssb_output.funcs[0].funHash.value[1] == 0 );
	ASSERT( ssb_output.funcs[0].funHash.lastBit  == 32 );
	ASSERT( Equals( ssb_output.funcs[0].ticks, 20.0f ) );
	ASSERT( Equals( ssb_output.funcs[0].accuracy, 1.0f ) );
	
	ASSERT( ssb_output.funcs[1].funHash.value[0] == 0x21212121 );
	ASSERT( ssb_output.funcs[1].funHash.value[1] == 0x1 );
	ASSERT( ssb_output.funcs[1].funHash.lastBit  == 33 );
	ASSERT( Equals( ssb_output.funcs[1].ticks, 22.0f ) );
	ASSERT( Equals( ssb_output.funcs[1].accuracy, 2.0f ) );
	
	ASSERT( ssb_output.funcs[2].funHash.value[0] == 0x32323232 );
	ASSERT( ssb_output.funcs[2].funHash.value[1] == 0x2 );
	ASSERT( ssb_output.funcs[2].funHash.lastBit  == 34 );
	ASSERT( Equals( ssb_output.funcs[2].ticks, 14.0f ) );
	ASSERT( Equals( ssb_output.funcs[2].accuracy, 1.5f ) );

	ssb.result = res;
}

#endif
#endif	// SHADER
